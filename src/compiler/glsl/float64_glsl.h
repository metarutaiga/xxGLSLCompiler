static const char float64_glsl[] =
 "/*\r"
    "\n"
    " * The implementations contained in this file are heavily based on the\r"
    "\n"
    " * implementations found in the Berkeley SoftFloat library. As such, they are\r"
    "\n"
    " * licensed under the same 3-clause BSD license:\r"
    "\n"
    " *\r"
    "\n"
    " * License for Berkeley SoftFloat Release 3e\r"
    "\n"
    " *\r"
    "\n"
    " * John R. Hauser\r"
    "\n"
    " * 2018 January 20\r"
    "\n"
    " *\r"
    "\n"
    " * The following applies to the whole of SoftFloat Release 3e as well as to\r"
    "\n"
    " * each source file individually.\r"
    "\n"
    " *\r"
    "\n"
    " * Copyright 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 The Regents of the\r"
    "\n"
    " * University of California.  All rights reserved.\r"
    "\n"
    " *\r"
    "\n"
    " * Redistribution and use in source and binary forms, with or without\r"
    "\n"
    " * modification, are permitted provided that the following conditions are met:\r"
    "\n"
    " *\r"
    "\n"
    " *  1. Redistributions of source code must retain the above copyright notice,\r"
    "\n"
    " *     this list of conditions, and the following disclaimer.\r"
    "\n"
    " *\r"
    "\n"
    " *  2. Redistributions in binary form must reproduce the above copyright\r"
    "\n"
    " *     notice, this list of conditions, and the following disclaimer in the\r"
    "\n"
    " *     documentation and/or other materials provided with the distribution.\r"
    "\n"
    " *\r"
    "\n"
    " *  3. Neither the name of the University nor the names of its contributors\r"
    "\n"
    " *     may be used to endorse or promote products derived from this software\r"
    "\n"
    " *     without specific prior written permission.\r"
    "\n"
    " *\r"
    "\n"
    " * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS \"AS IS\", AND ANY\r"
    "\n"
    " * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r"
    "\n"
    " * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE\r"
    "\n"
    " * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY\r"
    "\n"
    " * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r"
    "\n"
    " * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r"
    "\n"
    " * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r"
    "\n"
    " * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r"
    "\n"
    " * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r"
    "\n"
    " * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r"
    "\n"
    "*/\r"
    "\n"
    "\r"
    "\n"
    "#version 430\r"
    "\n"
    "#extension GL_ARB_gpu_shader_int64 : enable\r"
    "\n"
    "#extension GL_ARB_shader_bit_encoding : enable\r"
    "\n"
    "#extension GL_EXT_shader_integer_mix : enable\r"
    "\n"
    "#extension GL_MESA_shader_integer_functions : enable\r"
    "\n"
    "\r"
    "\n"
    "#pragma warning(off)\r"
    "\n"
    "\r"
    "\n"
    "/* Software IEEE floating-point rounding mode.\r"
    "\n"
    " * GLSL spec section \"4.7.1 Range and Precision\":\r"
    "\n"
    " * The rounding mode cannot be set and is undefined.\r"
    "\n"
    " * But here, we are able to define the rounding mode at the compilation time.\r"
    "\n"
    " */\r"
    "\n"
    "#define FLOAT_ROUND_NEAREST_EVEN    0\r"
    "\n"
    "#define FLOAT_ROUND_TO_ZERO         1\r"
    "\n"
    "#define FLOAT_ROUND_DOWN            2\r"
    "\n"
    "#define FLOAT_ROUND_UP              3\r"
    "\n"
    "#define FLOAT_ROUNDING_MODE         FLOAT_ROUND_NEAREST_EVEN\r"
    "\n"
    "\r"
    "\n"
    "/* Absolute value of a Float64 :\r"
    "\n"
    " * Clear the sign bit\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fabs64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   a.y &= 0x7FFFFFFFu;\r"
    "\n"
    "   return packUint2x32(a);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns 1 if the double-precision floating-point value `a' is a NaN;\r"
    "\n"
    " * otherwise returns 0.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "__is_nan(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   return (0xFFE00000u <= (a.y<<1)) &&\r"
    "\n"
    "      ((a.x != 0u) || ((a.y & 0x000FFFFFu) != 0u));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Negate value of a Float64 :\r"
    "\n"
    " * Toggle the sign bit\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fneg64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uint t = a.y;\r"
    "\n"
    "\r"
    "\n"
    "   t ^= (1u << 31);\r"
    "\n"
    "   a.y = mix(t, a.y, __is_nan(__a));\r"
    "\n"
    "   return packUint2x32(a);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fsign64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uvec2 retval;\r"
    "\n"
    "   retval.x = 0u;\r"
    "\n"
    "   retval.y = mix((a.y & 0x80000000u) | 0x3FF00000u, 0u, (a.y << 1 | a.x) == 0u);\r"
    "\n"
    "   return packUint2x32(retval);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the fraction bits of the double-precision floating-point value `a'.*/\r"
    "\n"
    "uint\r"
    "\n"
    "__extractFloat64FracLo(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   return unpackUint2x32(a).x;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint\r"
    "\n"
    "__extractFloat64FracHi(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   return unpackUint2x32(a).y & 0x000FFFFFu;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the exponent bits of the double-precision floating-point value `a'.*/\r"
    "\n"
    "int\r"
    "\n"
    "__extractFloat64Exp(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   return int((a.y>>20) & 0x7FFu);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "bool\r"
    "\n"
    "__feq64_nonnan(uint64_t __a, uint64_t __b)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uvec2 b = unpackUint2x32(__b);\r"
    "\n"
    "   return (a.x == b.x) &&\r"
    "\n"
    "          ((a.y == b.y) || ((a.x == 0u) && (((a.y | b.y)<<1) == 0u)));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns true if the double-precision floating-point value `a' is equal to the\r"
    "\n"
    " * corresponding value `b', and false otherwise.  The comparison is performed\r"
    "\n"
    " * according to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "__feq64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a) || __is_nan(b))\r"
    "\n"
    "      return false;\r"
    "\n"
    "\r"
    "\n"
    "   return __feq64_nonnan(a, b);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns true if the double-precision floating-point value `a' is not equal\r"
    "\n"
    " * to the corresponding value `b', and false otherwise.  The comparison is\r"
    "\n"
    " * performed according to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "__fne64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a) || __is_nan(b))\r"
    "\n"
    "      return true;\r"
    "\n"
    "\r"
    "\n"
    "   return !__feq64_nonnan(a, b);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the sign bit of the double-precision floating-point value `a'.*/\r"
    "\n"
    "uint\r"
    "\n"
    "__extractFloat64Sign(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   return unpackUint2x32(a).y >> 31;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns true if the 64-bit value formed by concatenating `a0' and `a1' is less\r"
    "\n"
    " * than the 64-bit value formed by concatenating `b0' and `b1'.  Otherwise,\r"
    "\n"
    " * returns false.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "lt64(uint a0, uint a1, uint b0, uint b1)\r"
    "\n"
    "{\r"
    "\n"
    "   return (a0 < b0) || ((a0 == b0) && (a1 < b1));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "bool\r"
    "\n"
    "__flt64_nonnan(uint64_t __a, uint64_t __b)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uvec2 b = unpackUint2x32(__b);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(__a);\r"
    "\n"
    "   uint bSign = __extractFloat64Sign(__b);\r"
    "\n"
    "   if (aSign != bSign)\r"
    "\n"
    "      return (aSign != 0u) && ((((a.y | b.y)<<1) | a.x | b.x) != 0u);\r"
    "\n"
    "\r"
    "\n"
    "   return mix(lt64(a.y, a.x, b.y, b.x), lt64(b.y, b.x, a.y, a.x), aSign != 0u);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns true if the double-precision floating-point value `a' is less than\r"
    "\n"
    " * the corresponding value `b', and false otherwise.  The comparison is performed\r"
    "\n"
    " * according to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "__flt64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a) || __is_nan(b))\r"
    "\n"
    "      return false;\r"
    "\n"
    "\r"
    "\n"
    "   return __flt64_nonnan(a, b);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns true if the double-precision floating-point value `a' is greater\r"
    "\n"
    " * than or equal to * the corresponding value `b', and false otherwise.  The\r"
    "\n"
    " * comparison is performed * according to the IEEE Standard for Floating-Point\r"
    "\n"
    " * Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "bool\r"
    "\n"
    "__fge64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a) || __is_nan(b))\r"
    "\n"
    "      return false;\r"
    "\n"
    "\r"
    "\n"
    "   return !__flt64_nonnan(a, b);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fsat64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__flt64(__a, 0ul))\r"
    "\n"
    "      return 0ul;\r"
    "\n"
    "\r"
    "\n"
    "   if (__fge64(__a, 0x3FF0000000000000ul /* 1.0 */))\r"
    "\n"
    "      return 0x3FF0000000000000ul;\r"
    "\n"
    "\r"
    "\n"
    "   return __a;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Adds the 64-bit value formed by concatenating `a0' and `a1' to the 64-bit\r"
    "\n"
    " * value formed by concatenating `b0' and `b1'.  Addition is modulo 2^64, so\r"
    "\n"
    " * any carry out is lost.  The result is broken into two 32-bit pieces which\r"
    "\n"
    " * are stored at the locations pointed to by `z0Ptr' and `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__add64(uint a0, uint a1, uint b0, uint b1,\r"
    "\n"
    "        out uint z0Ptr,\r"
    "\n"
    "        out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z1 = a1 + b1;\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = a0 + b0 + uint(z1 < a1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "\r"
    "\n"
    "/* Subtracts the 64-bit value formed by concatenating `b0' and `b1' from the\r"
    "\n"
    " * 64-bit value formed by concatenating `a0' and `a1'.  Subtraction is modulo\r"
    "\n"
    " * 2^64, so any borrow out (carry out) is lost.  The result is broken into two\r"
    "\n"
    " * 32-bit pieces which are stored at the locations pointed to by `z0Ptr' and\r"
    "\n"
    " * `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__sub64(uint a0, uint a1, uint b0, uint b1,\r"
    "\n"
    "        out uint z0Ptr,\r"
    "\n"
    "        out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   z1Ptr = a1 - b1;\r"
    "\n"
    "   z0Ptr = a0 - b0 - uint(a1 < b1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Shifts the 64-bit value formed by concatenating `a0' and `a1' right by the\r"
    "\n"
    " * number of bits given in `count'.  If any nonzero bits are shifted off, they\r"
    "\n"
    " * are \"jammed\" into the least significant bit of the result by setting the\r"
    "\n"
    " * least significant bit to 1.  The value of `count' can be arbitrarily large;\r"
    "\n"
    " * in particular, if `count' is greater than 64, the result will be either 0\r"
    "\n"
    " * or 1, depending on whether the concatenation of `a0' and `a1' is zero or\r"
    "\n"
    " * nonzero.  The result is broken into two 32-bit pieces which are stored at\r"
    "\n"
    " * the locations pointed to by `z0Ptr' and `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__shift64RightJamming(uint a0,\r"
    "\n"
    "                      uint a1,\r"
    "\n"
    "                      int count,\r"
    "\n"
    "                      out uint z0Ptr,\r"
    "\n"
    "                      out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z0;\r"
    "\n"
    "   uint z1;\r"
    "\n"
    "   int negCount = (-count) & 31;\r"
    "\n"
    "\r"
    "\n"
    "   z0 = mix(0u, a0, count == 0);\r"
    "\n"
    "   z0 = mix(z0, (a0 >> count), count < 32);\r"
    "\n"
    "\r"
    "\n"
    "   z1 = uint((a0 | a1) != 0u); /* count >= 64 */\r"
    "\n"
    "   uint z1_lt64 = (a0>>(count & 31)) | uint(((a0<<negCount) | a1) != 0u);\r"
    "\n"
    "   z1 = mix(z1, z1_lt64, count < 64);\r"
    "\n"
    "   z1 = mix(z1, (a0 | uint(a1 != 0u)), count == 32);\r"
    "\n"
    "   uint z1_lt32 = (a0<<negCount) | (a1>>count) | uint ((a1<<negCount) != 0u);\r"
    "\n"
    "   z1 = mix(z1, z1_lt32, count < 32);\r"
    "\n"
    "   z1 = mix(z1, a1, count == 0);\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Shifts the 96-bit value formed by concatenating `a0', `a1', and `a2' right\r"
    "\n"
    " * by 32 _plus_ the number of bits given in `count'.  The shifted result is\r"
    "\n"
    " * at most 64 nonzero bits; these are broken into two 32-bit pieces which are\r"
    "\n"
    " * stored at the locations pointed to by `z0Ptr' and `z1Ptr'.  The bits shifted\r"
    "\n"
    " * off form a third 32-bit result as follows:  The _last_ bit shifted off is\r"
    "\n"
    " * the most-significant bit of the extra result, and the other 31 bits of the\r"
    "\n"
    " * extra result are all zero if and only if _all_but_the_last_ bits shifted off\r"
    "\n"
    " * were all zero.  This extra result is stored in the location pointed to by\r"
    "\n"
    " * `z2Ptr'.  The value of `count' can be arbitrarily large.\r"
    "\n"
    " *     (This routine makes more sense if `a0', `a1', and `a2' are considered\r"
    "\n"
    " * to form a fixed-point value with binary point between `a1' and `a2'.  This\r"
    "\n"
    " * fixed-point value is shifted right by the number of bits given in `count',\r"
    "\n"
    " * and the integer part of the result is returned at the locations pointed to\r"
    "\n"
    " * by `z0Ptr' and `z1Ptr'.  The fractional part of the result may be slightly\r"
    "\n"
    " * corrupted as described above, and is returned at the location pointed to by\r"
    "\n"
    " * `z2Ptr'.)\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__shift64ExtraRightJamming(uint a0, uint a1, uint a2,\r"
    "\n"
    "                           int count,\r"
    "\n"
    "                           out uint z0Ptr,\r"
    "\n"
    "                           out uint z1Ptr,\r"
    "\n"
    "                           out uint z2Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z0 = 0u;\r"
    "\n"
    "   uint z1;\r"
    "\n"
    "   uint z2;\r"
    "\n"
    "   int negCount = (-count) & 31;\r"
    "\n"
    "\r"
    "\n"
    "   z2 = mix(uint(a0 != 0u), a0, count == 64);\r"
    "\n"
    "   z2 = mix(z2, a0 << negCount, count < 64);\r"
    "\n"
    "   z2 = mix(z2, a1 << negCount, count < 32);\r"
    "\n"
    "\r"
    "\n"
    "   z1 = mix(0u, (a0 >> (count & 31)), count < 64);\r"
    "\n"
    "   z1 = mix(z1, (a0<<negCount) | (a1>>count), count < 32);\r"
    "\n"
    "\r"
    "\n"
    "   a2 = mix(a2 | a1, a2, count < 32);\r"
    "\n"
    "   z0 = mix(z0, a0 >> count, count < 32);\r"
    "\n"
    "   z2 |= uint(a2 != 0u);\r"
    "\n"
    "\r"
    "\n"
    "   z0 = mix(z0, 0u, (count == 32));\r"
    "\n"
    "   z1 = mix(z1, a0, (count == 32));\r"
    "\n"
    "   z2 = mix(z2, a1, (count == 32));\r"
    "\n"
    "   z0 = mix(z0, a0, (count == 0));\r"
    "\n"
    "   z1 = mix(z1, a1, (count == 0));\r"
    "\n"
    "   z2 = mix(z2, a2, (count == 0));\r"
    "\n"
    "   z2Ptr = z2;\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Shifts the 64-bit value formed by concatenating `a0' and `a1' left by the\r"
    "\n"
    " * number of bits given in `count'.  Any bits shifted off are lost.  The value\r"
    "\n"
    " * of `count' must be less than 32.  The result is broken into two 32-bit\r"
    "\n"
    " * pieces which are stored at the locations pointed to by `z0Ptr' and `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__shortShift64Left(uint a0, uint a1,\r"
    "\n"
    "                   int count,\r"
    "\n"
    "                   out uint z0Ptr,\r"
    "\n"
    "                   out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   z1Ptr = a1<<count;\r"
    "\n"
    "   z0Ptr = mix((a0 << count | (a1 >> ((-count) & 31))), a0, count == 0);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Packs the sign `zSign', the exponent `zExp', and the significand formed by\r"
    "\n"
    " * the concatenation of `zFrac0' and `zFrac1' into a double-precision floating-\r"
    "\n"
    " * point value, returning the result.  After being shifted into the proper\r"
    "\n"
    " * positions, the three fields `zSign', `zExp', and `zFrac0' are simply added\r"
    "\n"
    " * together to form the most significant 32 bits of the result.  This means\r"
    "\n"
    " * that any integer portion of `zFrac0' will be added into the exponent.  Since\r"
    "\n"
    " * a properly normalized significand will have an integer portion equal to 1,\r"
    "\n"
    " * the `zExp' input should be 1 less than the desired result exponent whenever\r"
    "\n"
    " * `zFrac0' and `zFrac1' concatenated form a complete, normalized significand.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__packFloat64(uint zSign, int zExp, uint zFrac0, uint zFrac1)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 z;\r"
    "\n"
    "\r"
    "\n"
    "   z.y = (zSign << 31) + (uint(zExp) << 20) + zFrac0;\r"
    "\n"
    "   z.x = zFrac1;\r"
    "\n"
    "   return packUint2x32(z);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Takes an abstract floating-point value having sign `zSign', exponent `zExp',\r"
    "\n"
    " * and extended significand formed by the concatenation of `zFrac0', `zFrac1',\r"
    "\n"
    " * and `zFrac2', and returns the proper double-precision floating-point value\r"
    "\n"
    " * corresponding to the abstract input.  Ordinarily, the abstract value is\r"
    "\n"
    " * simply rounded and packed into the double-precision format, with the inexact\r"
    "\n"
    " * exception raised if the abstract input cannot be represented exactly.\r"
    "\n"
    " * However, if the abstract value is too large, the overflow and inexact\r"
    "\n"
    " * exceptions are raised and an infinity or maximal finite value is returned.\r"
    "\n"
    " * If the abstract value is too small, the input value is rounded to a\r"
    "\n"
    " * subnormal number, and the underflow and inexact exceptions are raised if the\r"
    "\n"
    " * abstract input cannot be represented exactly as a subnormal double-precision\r"
    "\n"
    " * floating-point number.\r"
    "\n"
    " *     The input significand must be normalized or smaller.  If the input\r"
    "\n"
    " * significand is not normalized, `zExp' must be 0; in that case, the result\r"
    "\n"
    " * returned is a subnormal number, and it must not require rounding.  In the\r"
    "\n"
    " * usual case that the input significand is normalized, `zExp' must be 1 less\r"
    "\n"
    " * than the \"true\" floating-point exponent.  The handling of underflow and\r"
    "\n"
    " * overflow follows the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__roundAndPackFloat64(uint zSign,\r"
    "\n"
    "                      int zExp,\r"
    "\n"
    "                      uint zFrac0,\r"
    "\n"
    "                      uint zFrac1,\r"
    "\n"
    "                      uint zFrac2)\r"
    "\n"
    "{\r"
    "\n"
    "   bool roundNearestEven;\r"
    "\n"
    "   bool increment;\r"
    "\n"
    "\r"
    "\n"
    "   roundNearestEven = FLOAT_ROUNDING_MODE == FLOAT_ROUND_NEAREST_EVEN;\r"
    "\n"
    "   increment = int(zFrac2) < 0;\r"
    "\n"
    "   if (!roundNearestEven) {\r"
    "\n"
    "      if (FLOAT_ROUNDING_MODE == FLOAT_ROUND_TO_ZERO) {\r"
    "\n"
    "         increment = false;\r"
    "\n"
    "      } else {\r"
    "\n"
    "         if (zSign != 0u) {\r"
    "\n"
    "            increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN) &&\r"
    "\n"
    "               (zFrac2 != 0u);\r"
    "\n"
    "         } else {\r"
    "\n"
    "            increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP) &&\r"
    "\n"
    "               (zFrac2 != 0u);\r"
    "\n"
    "         }\r"
    "\n"
    "      }\r"
    "\n"
    "   }\r"
    "\n"
    "   if (0x7FD <= zExp) {\r"
    "\n"
    "      if ((0x7FD < zExp) ||\r"
    "\n"
    "         ((zExp == 0x7FD) &&\r"
    "\n"
    "            (0x001FFFFFu == zFrac0 && 0xFFFFFFFFu == zFrac1) &&\r"
    "\n"
    "               increment)) {\r"
    "\n"
    "         if ((FLOAT_ROUNDING_MODE == FLOAT_ROUND_TO_ZERO) ||\r"
    "\n"
    "            ((zSign != 0u) && (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP)) ||\r"
    "\n"
    "               ((zSign == 0u) && (FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN))) {\r"
    "\n"
    "            return __packFloat64(zSign, 0x7FE, 0x000FFFFFu, 0xFFFFFFFFu);\r"
    "\n"
    "         }\r"
    "\n"
    "         return __packFloat64(zSign, 0x7FF, 0u, 0u);\r"
    "\n"
    "      }\r"
    "\n"
    "      if (zExp < 0) {\r"
    "\n"
    "         __shift64ExtraRightJamming(\r"
    "\n"
    "            zFrac0, zFrac1, zFrac2, -zExp, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "         zExp = 0;\r"
    "\n"
    "         if (roundNearestEven) {\r"
    "\n"
    "            increment = zFrac2 < 0u;\r"
    "\n"
    "         } else {\r"
    "\n"
    "            if (zSign != 0u) {\r"
    "\n"
    "               increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN) &&\r"
    "\n"
    "                  (zFrac2 != 0u);\r"
    "\n"
    "            } else {\r"
    "\n"
    "               increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP) &&\r"
    "\n"
    "                  (zFrac2 != 0u);\r"
    "\n"
    "            }\r"
    "\n"
    "         }\r"
    "\n"
    "      }\r"
    "\n"
    "   }\r"
    "\n"
    "   if (increment) {\r"
    "\n"
    "      __add64(zFrac0, zFrac1, 0u, 1u, zFrac0, zFrac1);\r"
    "\n"
    "      zFrac1 &= ~((zFrac2 + uint(zFrac2 == 0u)) & uint(roundNearestEven));\r"
    "\n"
    "   } else {\r"
    "\n"
    "      zExp = mix(zExp, 0, (zFrac0 | zFrac1) == 0u);\r"
    "\n"
    "   }\r"
    "\n"
    "   return __packFloat64(zSign, zExp, zFrac0, zFrac1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__roundAndPackUInt64(uint zSign, uint zFrac0, uint zFrac1, uint zFrac2)\r"
    "\n"
    "{\r"
    "\n"
    "   bool roundNearestEven;\r"
    "\n"
    "   bool increment;\r"
    "\n"
    "   uint64_t default_nan = 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "\r"
    "\n"
    "   roundNearestEven = FLOAT_ROUNDING_MODE == FLOAT_ROUND_NEAREST_EVEN;\r"
    "\n"
    "\r"
    "\n"
    "   if (zFrac2 >= 0x80000000u)\r"
    "\n"
    "      increment = false;\r"
    "\n"
    "\r"
    "\n"
    "   if (!roundNearestEven) {\r"
    "\n"
    "      if (zSign != 0u) {\r"
    "\n"
    "         if ((FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN) && (zFrac2 != 0u)) {\r"
    "\n"
    "            increment = false;\r"
    "\n"
    "         }\r"
    "\n"
    "      } else {\r"
    "\n"
    "         increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP) &&\r"
    "\n"
    "            (zFrac2 != 0u);\r"
    "\n"
    "      }\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   if (increment) {\r"
    "\n"
    "      __add64(zFrac0, zFrac1, 0u, 1u, zFrac0, zFrac1);\r"
    "\n"
    "      if ((zFrac0 | zFrac1) != 0u)\r"
    "\n"
    "         zFrac1 &= ~(1u) + uint(zFrac2 == 0u) & uint(roundNearestEven);\r"
    "\n"
    "   }\r"
    "\n"
    "   return mix(packUint2x32(uvec2(zFrac1, zFrac0)), default_nan,\r"
    "\n"
    "              (zSign !=0u && (zFrac0 | zFrac1) != 0u));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "int64_t\r"
    "\n"
    "__roundAndPackInt64(uint zSign, uint zFrac0, uint zFrac1, uint zFrac2)\r"
    "\n"
    "{\r"
    "\n"
    "   bool roundNearestEven;\r"
    "\n"
    "   bool increment;\r"
    "\n"
    "   int64_t default_NegNaN = -0x7FFFFFFFFFFFFFFEL;\r"
    "\n"
    "   int64_t default_PosNaN = 0xFFFFFFFFFFFFFFFFL;\r"
    "\n"
    "\r"
    "\n"
    "   roundNearestEven = FLOAT_ROUNDING_MODE == FLOAT_ROUND_NEAREST_EVEN;\r"
    "\n"
    "\r"
    "\n"
    "   if (zFrac2 >= 0x80000000u)\r"
    "\n"
    "      increment = false;\r"
    "\n"
    "\r"
    "\n"
    "   if (!roundNearestEven) {\r"
    "\n"
    "      if (zSign != 0u) {\r"
    "\n"
    "         increment = ((FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN) &&\r"
    "\n"
    "            (zFrac2 != 0u));\r"
    "\n"
    "      } else {\r"
    "\n"
    "         increment = (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP) &&\r"
    "\n"
    "            (zFrac2 != 0u);\r"
    "\n"
    "      }\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   if (increment) {\r"
    "\n"
    "      __add64(zFrac0, zFrac1, 0u, 1u, zFrac0, zFrac1);\r"
    "\n"
    "      if ((zFrac0 | zFrac1) != 0u)\r"
    "\n"
    "         zFrac1 &= ~(1u) + uint(zFrac2 == 0u) & uint(roundNearestEven);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   int64_t absZ = mix(int64_t(packUint2x32(uvec2(zFrac1, zFrac0))),\r"
    "\n"
    "                      -int64_t(packUint2x32(uvec2(zFrac1, zFrac0))),\r"
    "\n"
    "                      (zSign != 0u));\r"
    "\n"
    "   int64_t nan = mix(default_PosNaN, default_NegNaN, bool(zSign));\r"
    "\n"
    "   return mix(absZ, nan, bool(zSign ^ uint(absZ < 0)) && bool(absZ));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the number of leading 0 bits before the most-significant 1 bit of\r"
    "\n"
    " * `a'.  If `a' is zero, 32 is returned.\r"
    "\n"
    " */\r"
    "\n"
    "int\r"
    "\n"
    "__countLeadingZeros32(uint a)\r"
    "\n"
    "{\r"
    "\n"
    "   int shiftCount;\r"
    "\n"
    "   shiftCount = mix(31 - findMSB(a), 32, a == 0u);\r"
    "\n"
    "   return shiftCount;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Takes an abstract floating-point value having sign `zSign', exponent `zExp',\r"
    "\n"
    " * and significand formed by the concatenation of `zSig0' and `zSig1', and\r"
    "\n"
    " * returns the proper double-precision floating-point value corresponding\r"
    "\n"
    " * to the abstract input.  This routine is just like `__roundAndPackFloat64'\r"
    "\n"
    " * except that the input significand has fewer bits and does not have to be\r"
    "\n"
    " * normalized.  In all cases, `zExp' must be 1 less than the \"true\" floating-\r"
    "\n"
    " * point exponent.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__normalizeRoundAndPackFloat64(uint zSign,\r"
    "\n"
    "                               int zExp,\r"
    "\n"
    "                               uint zFrac0,\r"
    "\n"
    "                               uint zFrac1)\r"
    "\n"
    "{\r"
    "\n"
    "   int shiftCount;\r"
    "\n"
    "   uint zFrac2;\r"
    "\n"
    "\r"
    "\n"
    "   if (zFrac0 == 0u) {\r"
    "\n"
    "      zExp -= 32;\r"
    "\n"
    "      zFrac0 = zFrac1;\r"
    "\n"
    "      zFrac1 = 0u;\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   shiftCount = __countLeadingZeros32(zFrac0) - 11;\r"
    "\n"
    "   if (0 <= shiftCount) {\r"
    "\n"
    "      zFrac2 = 0u;\r"
    "\n"
    "      __shortShift64Left(zFrac0, zFrac1, shiftCount, zFrac0, zFrac1);\r"
    "\n"
    "   } else {\r"
    "\n"
    "      __shift64ExtraRightJamming(\r"
    "\n"
    "         zFrac0, zFrac1, 0u, -shiftCount, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "   }\r"
    "\n"
    "   zExp -= shiftCount;\r"
    "\n"
    "   return __roundAndPackFloat64(zSign, zExp, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Takes two double-precision floating-point values `a' and `b', one of which\r"
    "\n"
    " * is a NaN, and returns the appropriate NaN result.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__propagateFloat64NaN(uint64_t __a, uint64_t __b)\r"
    "\n"
    "{\r"
    "\n"
    "   bool aIsNaN = __is_nan(__a);\r"
    "\n"
    "   bool bIsNaN = __is_nan(__b);\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uvec2 b = unpackUint2x32(__b);\r"
    "\n"
    "   a.y |= 0x00080000u;\r"
    "\n"
    "   b.y |= 0x00080000u;\r"
    "\n"
    "\r"
    "\n"
    "   return packUint2x32(mix(b, mix(a, b, bvec2(bIsNaN, bIsNaN)), bvec2(aIsNaN, aIsNaN)));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of adding the double-precision floating-point values\r"
    "\n"
    " * `a' and `b'.  The operation is performed according to the IEEE Standard for\r"
    "\n"
    " * Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fadd64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "   uint bSign = __extractFloat64Sign(b);\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   uint bFracLo = __extractFloat64FracLo(b);\r"
    "\n"
    "   uint bFracHi = __extractFloat64FracHi(b);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   int bExp = __extractFloat64Exp(b);\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   int expDiff = aExp - bExp;\r"
    "\n"
    "   if (aSign == bSign) {\r"
    "\n"
    "      uint zFrac2 = 0u;\r"
    "\n"
    "      int zExp;\r"
    "\n"
    "      bool orig_exp_diff_is_zero = (expDiff == 0);\r"
    "\n"
    "\r"
    "\n"
    "      if (orig_exp_diff_is_zero) {\r"
    "\n"
    "         if (aExp == 0x7FF) {\r"
    "\n"
    "            bool propagate = (aFracHi | aFracLo | bFracHi | bFracLo) != 0u;\r"
    "\n"
    "            return mix(a, __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "         }\r"
    "\n"
    "         __add64(aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         if (aExp == 0)\r"
    "\n"
    "            return __packFloat64(aSign, 0, zFrac0, zFrac1);\r"
    "\n"
    "         zFrac2 = 0u;\r"
    "\n"
    "         zFrac0 |= 0x00200000u;\r"
    "\n"
    "         zExp = aExp;\r"
    "\n"
    "         __shift64ExtraRightJamming(\r"
    "\n"
    "            zFrac0, zFrac1, zFrac2, 1, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "      } else if (0 < expDiff) {\r"
    "\n"
    "         if (aExp == 0x7FF) {\r"
    "\n"
    "            bool propagate = (aFracHi | aFracLo) != 0u;\r"
    "\n"
    "            return mix(a, __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "         }\r"
    "\n"
    "\r"
    "\n"
    "         expDiff = mix(expDiff, expDiff - 1, bExp == 0);\r"
    "\n"
    "         bFracHi = mix(bFracHi | 0x00100000u, bFracHi, bExp == 0);\r"
    "\n"
    "         __shift64ExtraRightJamming(\r"
    "\n"
    "            bFracHi, bFracLo, 0u, expDiff, bFracHi, bFracLo, zFrac2);\r"
    "\n"
    "         zExp = aExp;\r"
    "\n"
    "      } else if (expDiff < 0) {\r"
    "\n"
    "         if (bExp == 0x7FF) {\r"
    "\n"
    "            bool propagate = (bFracHi | bFracLo) != 0u;\r"
    "\n"
    "            return mix(__packFloat64(aSign, 0x7ff, 0u, 0u), __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "         }\r"
    "\n"
    "         expDiff = mix(expDiff, expDiff + 1, aExp == 0);\r"
    "\n"
    "         aFracHi = mix(aFracHi | 0x00100000u, aFracHi, aExp == 0);\r"
    "\n"
    "         __shift64ExtraRightJamming(\r"
    "\n"
    "            aFracHi, aFracLo, 0u, - expDiff, aFracHi, aFracLo, zFrac2);\r"
    "\n"
    "         zExp = bExp;\r"
    "\n"
    "      }\r"
    "\n"
    "      if (!orig_exp_diff_is_zero) {\r"
    "\n"
    "         aFracHi |= 0x00100000u;\r"
    "\n"
    "         __add64(aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         --zExp;\r"
    "\n"
    "         if (!(zFrac0 < 0x00200000u)) {\r"
    "\n"
    "            __shift64ExtraRightJamming(zFrac0, zFrac1, zFrac2, 1, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "            ++zExp;\r"
    "\n"
    "         }\r"
    "\n"
    "      }\r"
    "\n"
    "      return __roundAndPackFloat64(aSign, zExp, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "\r"
    "\n"
    "   } else {\r"
    "\n"
    "      int zExp;\r"
    "\n"
    "\r"
    "\n"
    "      __shortShift64Left(aFracHi, aFracLo, 10, aFracHi, aFracLo);\r"
    "\n"
    "      __shortShift64Left(bFracHi, bFracLo, 10, bFracHi, bFracLo);\r"
    "\n"
    "      if (0 < expDiff) {\r"
    "\n"
    "         if (aExp == 0x7FF) {\r"
    "\n"
    "            bool propagate = (aFracHi | aFracLo) != 0u;\r"
    "\n"
    "            return mix(a, __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "         }\r"
    "\n"
    "         expDiff = mix(expDiff, expDiff - 1, bExp == 0);\r"
    "\n"
    "         bFracHi = mix(bFracHi | 0x40000000u, bFracHi, bExp == 0);\r"
    "\n"
    "         __shift64RightJamming(bFracHi, bFracLo, expDiff, bFracHi, bFracLo);\r"
    "\n"
    "         aFracHi |= 0x40000000u;\r"
    "\n"
    "         __sub64(aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         zExp = aExp;\r"
    "\n"
    "         --zExp;\r"
    "\n"
    "         return __normalizeRoundAndPackFloat64(aSign, zExp - 10, zFrac0, zFrac1);\r"
    "\n"
    "      }\r"
    "\n"
    "      if (expDiff < 0) {\r"
    "\n"
    "         if (bExp == 0x7FF) {\r"
    "\n"
    "            bool propagate = (bFracHi | bFracLo) != 0u;\r"
    "\n"
    "            return mix(__packFloat64(aSign ^ 1u, 0x7ff, 0u, 0u), __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "         }\r"
    "\n"
    "         expDiff = mix(expDiff, expDiff + 1, aExp == 0);\r"
    "\n"
    "         aFracHi = mix(aFracHi | 0x40000000u, aFracHi, aExp == 0);\r"
    "\n"
    "         __shift64RightJamming(aFracHi, aFracLo, - expDiff, aFracHi, aFracLo);\r"
    "\n"
    "         bFracHi |= 0x40000000u;\r"
    "\n"
    "         __sub64(bFracHi, bFracLo, aFracHi, aFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         zExp = bExp;\r"
    "\n"
    "         aSign ^= 1u;\r"
    "\n"
    "         --zExp;\r"
    "\n"
    "         return __normalizeRoundAndPackFloat64(aSign, zExp - 10, zFrac0, zFrac1);\r"
    "\n"
    "      }\r"
    "\n"
    "      if (aExp == 0x7FF) {\r"
    "\n"
    "          bool propagate = (aFracHi | aFracLo | bFracHi | bFracLo) != 0u;\r"
    "\n"
    "         return mix(0xFFFFFFFFFFFFFFFFUL, __propagateFloat64NaN(a, b), propagate);\r"
    "\n"
    "      }\r"
    "\n"
    "      bExp = mix(bExp, 1, aExp == 0);\r"
    "\n"
    "      aExp = mix(aExp, 1, aExp == 0);\r"
    "\n"
    "      bool zexp_normal = false;\r"
    "\n"
    "      bool blta = true;\r"
    "\n"
    "      if (bFracHi < aFracHi) {\r"
    "\n"
    "         __sub64(aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         zexp_normal = true;\r"
    "\n"
    "      }\r"
    "\n"
    "      else if (aFracHi < bFracHi) {\r"
    "\n"
    "         __sub64(bFracHi, bFracLo, aFracHi, aFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         blta = false;\r"
    "\n"
    "         zexp_normal = true;\r"
    "\n"
    "      }\r"
    "\n"
    "      else if (bFracLo < aFracLo) {\r"
    "\n"
    "         __sub64(aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1);\r"
    "\n"
    "         zexp_normal = true;\r"
    "\n"
    "      }\r"
    "\n"
    "      else if (aFracLo < bFracLo) {\r"
    "\n"
    "         __sub64(bFracHi, bFracLo, aFracHi, aFracLo, zFrac0, zFrac1);\r"
    "\n"
    "          blta = false;\r"
    "\n"
    "          zexp_normal = true;\r"
    "\n"
    "      }\r"
    "\n"
    "      zExp = mix(bExp, aExp, blta);\r"
    "\n"
    "      aSign = mix(aSign ^ 1u, aSign, blta);\r"
    "\n"
    "      uint64_t retval_0 = __packFloat64(uint(FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN), 0, 0u, 0u);\r"
    "\n"
    "      uint64_t retval_1 = __normalizeRoundAndPackFloat64(aSign, zExp - 11, zFrac0, zFrac1);\r"
    "\n"
    "      return mix(retval_0, retval_1, zexp_normal);\r"
    "\n"
    "   }\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Multiplies `a' by `b' to obtain a 64-bit product.  The product is broken\r"
    "\n"
    " * into two 32-bit pieces which are stored at the locations pointed to by\r"
    "\n"
    " * `z0Ptr' and `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__mul32To64(uint a, uint b, out uint z0Ptr, out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aLow = a & 0x0000FFFFu;\r"
    "\n"
    "   uint aHigh = a>>16;\r"
    "\n"
    "   uint bLow = b & 0x0000FFFFu;\r"
    "\n"
    "   uint bHigh = b>>16;\r"
    "\n"
    "   uint z1 = aLow * bLow;\r"
    "\n"
    "   uint zMiddleA = aLow * bHigh;\r"
    "\n"
    "   uint zMiddleB = aHigh * bLow;\r"
    "\n"
    "   uint z0 = aHigh * bHigh;\r"
    "\n"
    "   zMiddleA += zMiddleB;\r"
    "\n"
    "   z0 += ((uint(zMiddleA < zMiddleB)) << 16) + (zMiddleA >> 16);\r"
    "\n"
    "   zMiddleA <<= 16;\r"
    "\n"
    "   z1 += zMiddleA;\r"
    "\n"
    "   z0 += uint(z1 < zMiddleA);\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Multiplies the 64-bit value formed by concatenating `a0' and `a1' to the\r"
    "\n"
    " * 64-bit value formed by concatenating `b0' and `b1' to obtain a 128-bit\r"
    "\n"
    " * product.  The product is broken into four 32-bit pieces which are stored at\r"
    "\n"
    " * the locations pointed to by `z0Ptr', `z1Ptr', `z2Ptr', and `z3Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__mul64To128(uint a0, uint a1, uint b0, uint b1,\r"
    "\n"
    "             out uint z0Ptr,\r"
    "\n"
    "             out uint z1Ptr,\r"
    "\n"
    "             out uint z2Ptr,\r"
    "\n"
    "             out uint z3Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z0 = 0u;\r"
    "\n"
    "   uint z1 = 0u;\r"
    "\n"
    "   uint z2 = 0u;\r"
    "\n"
    "   uint z3 = 0u;\r"
    "\n"
    "   uint more1 = 0u;\r"
    "\n"
    "   uint more2 = 0u;\r"
    "\n"
    "\r"
    "\n"
    "   __mul32To64(a1, b1, z2, z3);\r"
    "\n"
    "   __mul32To64(a1, b0, z1, more2);\r"
    "\n"
    "   __add64(z1, more2, 0u, z2, z1, z2);\r"
    "\n"
    "   __mul32To64(a0, b0, z0, more1);\r"
    "\n"
    "   __add64(z0, more1, 0u, z1, z0, z1);\r"
    "\n"
    "   __mul32To64(a0, b1, more1, more2);\r"
    "\n"
    "   __add64(more1, more2, 0u, z2, more1, z2);\r"
    "\n"
    "   __add64(z0, z1, 0u, more1, z0, z1);\r"
    "\n"
    "   z3Ptr = z3;\r"
    "\n"
    "   z2Ptr = z2;\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Normalizes the subnormal double-precision floating-point value represented\r"
    "\n"
    " * by the denormalized significand formed by the concatenation of `aFrac0' and\r"
    "\n"
    " * `aFrac1'.  The normalized exponent is stored at the location pointed to by\r"
    "\n"
    " * `zExpPtr'.  The most significant 21 bits of the normalized significand are\r"
    "\n"
    " * stored at the location pointed to by `zFrac0Ptr', and the least significant\r"
    "\n"
    " * 32 bits of the normalized significand are stored at the location pointed to\r"
    "\n"
    " * by `zFrac1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__normalizeFloat64Subnormal(uint aFrac0, uint aFrac1,\r"
    "\n"
    "                            out int zExpPtr,\r"
    "\n"
    "                            out uint zFrac0Ptr,\r"
    "\n"
    "                            out uint zFrac1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   int shiftCount;\r"
    "\n"
    "   uint temp_zfrac0, temp_zfrac1;\r"
    "\n"
    "   shiftCount = __countLeadingZeros32(mix(aFrac0, aFrac1, aFrac0 == 0u)) - 11;\r"
    "\n"
    "   zExpPtr = mix(1 - shiftCount, -shiftCount - 31, aFrac0 == 0u);\r"
    "\n"
    "\r"
    "\n"
    "   temp_zfrac0 = mix(aFrac1<<shiftCount, aFrac1>>(-shiftCount), shiftCount < 0);\r"
    "\n"
    "   temp_zfrac1 = mix(0u, aFrac1<<(shiftCount & 31), shiftCount < 0);\r"
    "\n"
    "\r"
    "\n"
    "   __shortShift64Left(aFrac0, aFrac1, shiftCount, zFrac0Ptr, zFrac1Ptr);\r"
    "\n"
    "\r"
    "\n"
    "   zFrac0Ptr = mix(zFrac0Ptr, temp_zfrac0, aFrac0 == 0);\r"
    "\n"
    "   zFrac1Ptr = mix(zFrac1Ptr, temp_zfrac1, aFrac0 == 0);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of multiplying the double-precision floating-point values\r"
    "\n"
    " * `a' and `b'.  The operation is performed according to the IEEE Standard for\r"
    "\n"
    " * Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fmul64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   uint zFrac3 = 0u;\r"
    "\n"
    "   int zExp;\r"
    "\n"
    "\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   uint bFracLo = __extractFloat64FracLo(b);\r"
    "\n"
    "   uint bFracHi = __extractFloat64FracHi(b);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "   int bExp = __extractFloat64Exp(b);\r"
    "\n"
    "   uint bSign = __extractFloat64Sign(b);\r"
    "\n"
    "   uint zSign = aSign ^ bSign;\r"
    "\n"
    "   if (aExp == 0x7FF) {\r"
    "\n"
    "      if (((aFracHi | aFracLo) != 0u) ||\r"
    "\n"
    "         ((bExp == 0x7FF) && ((bFracHi | bFracLo) != 0u))) {\r"
    "\n"
    "         return __propagateFloat64NaN(a, b);\r"
    "\n"
    "      }\r"
    "\n"
    "      if ((uint(bExp) | bFracHi | bFracLo) == 0u)\r"
    "\n"
    "            return 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "      return __packFloat64(zSign, 0x7FF, 0u, 0u);\r"
    "\n"
    "   }\r"
    "\n"
    "   if (bExp == 0x7FF) {\r"
    "\n"
    "      if ((bFracHi | bFracLo) != 0u)\r"
    "\n"
    "         return __propagateFloat64NaN(a, b);\r"
    "\n"
    "      if ((uint(aExp) | aFracHi | aFracLo) == 0u)\r"
    "\n"
    "         return 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "      return __packFloat64(zSign, 0x7FF, 0u, 0u);\r"
    "\n"
    "   }\r"
    "\n"
    "   if (aExp == 0) {\r"
    "\n"
    "      if ((aFracHi | aFracLo) == 0u)\r"
    "\n"
    "         return __packFloat64(zSign, 0, 0u, 0u);\r"
    "\n"
    "      __normalizeFloat64Subnormal(aFracHi, aFracLo, aExp, aFracHi, aFracLo);\r"
    "\n"
    "   }\r"
    "\n"
    "   if (bExp == 0) {\r"
    "\n"
    "      if ((bFracHi | bFracLo) == 0u)\r"
    "\n"
    "         return __packFloat64(zSign, 0, 0u, 0u);\r"
    "\n"
    "      __normalizeFloat64Subnormal(bFracHi, bFracLo, bExp, bFracHi, bFracLo);\r"
    "\n"
    "   }\r"
    "\n"
    "   zExp = aExp + bExp - 0x400;\r"
    "\n"
    "   aFracHi |= 0x00100000u;\r"
    "\n"
    "   __shortShift64Left(bFracHi, bFracLo, 12, bFracHi, bFracLo);\r"
    "\n"
    "   __mul64To128(\r"
    "\n"
    "      aFracHi, aFracLo, bFracHi, bFracLo, zFrac0, zFrac1, zFrac2, zFrac3);\r"
    "\n"
    "   __add64(zFrac0, zFrac1, aFracHi, aFracLo, zFrac0, zFrac1);\r"
    "\n"
    "   zFrac2 |= uint(zFrac3 != 0u);\r"
    "\n"
    "   if (0x00200000u <= zFrac0) {\r"
    "\n"
    "      __shift64ExtraRightJamming(\r"
    "\n"
    "         zFrac0, zFrac1, zFrac2, 1, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "      ++zExp;\r"
    "\n"
    "   }\r"
    "\n"
    "   return __roundAndPackFloat64(zSign, zExp, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__ffma64(uint64_t a, uint64_t b, uint64_t c)\r"
    "\n"
    "{\r"
    "\n"
    "   return __fadd64(__fmul64(a, b), c);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Shifts the 64-bit value formed by concatenating `a0' and `a1' right by the\r"
    "\n"
    " * number of bits given in `count'.  Any bits shifted off are lost.  The value\r"
    "\n"
    " * of `count' can be arbitrarily large; in particular, if `count' is greater\r"
    "\n"
    " * than 64, the result will be 0.  The result is broken into two 32-bit pieces\r"
    "\n"
    " * which are stored at the locations pointed to by `z0Ptr' and `z1Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__shift64Right(uint a0, uint a1,\r"
    "\n"
    "               int count,\r"
    "\n"
    "               out uint z0Ptr,\r"
    "\n"
    "               out uint z1Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z0;\r"
    "\n"
    "   uint z1;\r"
    "\n"
    "   int negCount = (-count) & 31;\r"
    "\n"
    "\r"
    "\n"
    "   z0 = 0u;\r"
    "\n"
    "   z0 = mix(z0, (a0 >> count), count < 32);\r"
    "\n"
    "   z0 = mix(z0, a0, count == 0);\r"
    "\n"
    "\r"
    "\n"
    "   z1 = mix(0u, (a0 >> (count & 31)), count < 64);\r"
    "\n"
    "   z1 = mix(z1, (a0<<negCount) | (a1>>count), count < 32);\r"
    "\n"
    "   z1 = mix(z1, a0, count == 0);\r"
    "\n"
    "\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of converting the double-precision floating-point value\r"
    "\n"
    " * `a' to the unsigned integer format.  The conversion is performed according\r"
    "\n"
    " * to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint\r"
    "\n"
    "__fp64_to_uint(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "\r"
    "\n"
    "   if ((aExp == 0x7FF) && ((aFracHi | aFracLo) != 0u))\r"
    "\n"
    "      return 0xFFFFFFFFu;\r"
    "\n"
    "\r"
    "\n"
    "   aFracHi |= mix(0u, 0x00100000u, aExp != 0);\r"
    "\n"
    "\r"
    "\n"
    "   int shiftDist = 0x427 - aExp;\r"
    "\n"
    "   if (0 < shiftDist)\r"
    "\n"
    "      __shift64RightJamming(aFracHi, aFracLo, shiftDist, aFracHi, aFracLo);\r"
    "\n"
    "\r"
    "\n"
    "   if ((aFracHi & 0xFFFFF000u) != 0u)\r"
    "\n"
    "      return mix(~0u, 0u, (aSign != 0u));\r"
    "\n"
    "\r"
    "\n"
    "   uint z = 0u;\r"
    "\n"
    "   uint zero = 0u;\r"
    "\n"
    "   __shift64Right(aFracHi, aFracLo, 12, zero, z);\r"
    "\n"
    "\r"
    "\n"
    "   uint expt = mix(~0u, 0u, (aSign != 0u));\r"
    "\n"
    "\r"
    "\n"
    "   return mix(z, expt, (aSign != 0u) && (z != 0u));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__uint_to_fp64(uint a)\r"
    "\n"
    "{\r"
    "\n"
    "   if (a == 0u)\r"
    "\n"
    "      return 0ul;\r"
    "\n"
    "\r"
    "\n"
    "   int shiftDist = __countLeadingZeros32(a) + 21;\r"
    "\n"
    "\r"
    "\n"
    "   uint aHigh = 0u;\r"
    "\n"
    "   uint aLow = 0u;\r"
    "\n"
    "   int negCount = (- shiftDist) & 31;\r"
    "\n"
    "\r"
    "\n"
    "   aHigh = mix(0u, a<< shiftDist - 32, shiftDist < 64);\r"
    "\n"
    "   aLow = 0u;\r"
    "\n"
    "   aHigh = mix(aHigh, 0u, shiftDist == 0);\r"
    "\n"
    "   aLow = mix(aLow, a, shiftDist ==0);\r"
    "\n"
    "   aHigh = mix(aHigh, a >> negCount, shiftDist < 32);\r"
    "\n"
    "   aLow = mix(aLow, a << shiftDist, shiftDist < 32);\r"
    "\n"
    "\r"
    "\n"
    "   return __packFloat64(0u, 0x432 - shiftDist, aHigh, aLow);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__uint64_to_fp64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   if (a == 0u)\r"
    "\n"
    "      return 0ul;\r"
    "\n"
    "\r"
    "\n"
    "   uvec2 aFrac = unpackUint2x32(a);\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "\r"
    "\n"
    "   if ((aFracHi & 0x80000000u) != 0u) {\r"
    "\n"
    "      __shift64RightJamming(aFracHi, aFracLo, 1, aFracHi, aFracLo);\r"
    "\n"
    "      return __roundAndPackFloat64(0, 0x433, aFracHi, aFracLo, 0u);\r"
    "\n"
    "   } else {\r"
    "\n"
    "      return __normalizeRoundAndPackFloat64(0, 0x432, aFrac.y, aFrac.x);\r"
    "\n"
    "   }\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fp64_to_uint64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   uint64_t default_nan = 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "\r"
    "\n"
    "   aFracHi = mix(aFracHi, aFracHi | 0x00100000u, aExp != 0);\r"
    "\n"
    "   int shiftCount = 0x433 - aExp;\r"
    "\n"
    "\r"
    "\n"
    "   if ( shiftCount <= 0 ) {\r"
    "\n"
    "      if (shiftCount < -11 && aExp == 0x7FF) {\r"
    "\n"
    "         if ((aFracHi | aFracLo) != 0u)\r"
    "\n"
    "            return __propagateFloat64NaN(a, a);\r"
    "\n"
    "         return mix(default_nan, a, aSign == 0u);\r"
    "\n"
    "      }\r"
    "\n"
    "      __shortShift64Left(aFracHi, aFracLo, -shiftCount, aFracHi, aFracLo);\r"
    "\n"
    "   } else {\r"
    "\n"
    "      __shift64ExtraRightJamming(aFracHi, aFracLo, zFrac2, shiftCount,\r"
    "\n"
    "                                 aFracHi, aFracLo, zFrac2);\r"
    "\n"
    "   }\r"
    "\n"
    "   return __roundAndPackUInt64(aSign, aFracHi, aFracLo, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "int64_t\r"
    "\n"
    "__fp64_to_int64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "   int64_t default_NegNaN = -0x7FFFFFFFFFFFFFFEL;\r"
    "\n"
    "   int64_t default_PosNaN = 0xFFFFFFFFFFFFFFFFL;\r"
    "\n"
    "\r"
    "\n"
    "   aFracHi = mix(aFracHi, aFracHi | 0x00100000u, aExp != 0);\r"
    "\n"
    "   int shiftCount = 0x433 - aExp;\r"
    "\n"
    "\r"
    "\n"
    "   if (shiftCount <= 0) {\r"
    "\n"
    "      if (shiftCount < -11 && aExp == 0x7FF) {\r"
    "\n"
    "         if ((aFracHi | aFracLo) != 0u)\r"
    "\n"
    "            return default_NegNaN;\r"
    "\n"
    "         return mix(default_NegNaN, default_PosNaN, aSign == 0u);\r"
    "\n"
    "      }\r"
    "\n"
    "      __shortShift64Left(aFracHi, aFracLo, -shiftCount, aFracHi, aFracLo);\r"
    "\n"
    "   } else {\r"
    "\n"
    "      __shift64ExtraRightJamming(aFracHi, aFracLo, zFrac2, shiftCount,\r"
    "\n"
    "                                 aFracHi, aFracLo, zFrac2);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   return __roundAndPackInt64(aSign, aFracHi, aFracLo, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fp32_to_uint64(float f)\r"
    "\n"
    "{\r"
    "\n"
    "   uint a = floatBitsToUint(f);\r"
    "\n"
    "   uint aFrac = a & 0x007FFFFFu;\r"
    "\n"
    "   int aExp = int((a>>23) & 0xFFu);\r"
    "\n"
    "   uint aSign = a>>31;\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   uint64_t default_nan = 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "   int shiftCount = 0xBE - aExp;\r"
    "\n"
    "\r"
    "\n"
    "   if (shiftCount <0) {\r"
    "\n"
    "      if (aExp == 0xFF)\r"
    "\n"
    "         return default_nan;\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   aFrac = mix(aFrac, aFrac | 0x00800000u, aExp != 0);\r"
    "\n"
    "   __shortShift64Left(aFrac, 0, 40, zFrac0, zFrac1);\r"
    "\n"
    "\r"
    "\n"
    "   if (shiftCount != 0) {\r"
    "\n"
    "      __shift64ExtraRightJamming(zFrac0, zFrac1, zFrac2, shiftCount,\r"
    "\n"
    "                                 zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   return __roundAndPackUInt64(aSign, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "int64_t\r"
    "\n"
    "__fp32_to_int64(float f)\r"
    "\n"
    "{\r"
    "\n"
    "   uint a = floatBitsToUint(f);\r"
    "\n"
    "   uint aFrac = a & 0x007FFFFFu;\r"
    "\n"
    "   int aExp = int((a>>23) & 0xFFu);\r"
    "\n"
    "   uint aSign = a>>31;\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   int64_t default_NegNaN = -0x7FFFFFFFFFFFFFFEL;\r"
    "\n"
    "   int64_t default_PosNaN = 0xFFFFFFFFFFFFFFFFL;\r"
    "\n"
    "   int shiftCount = 0xBE - aExp;\r"
    "\n"
    "\r"
    "\n"
    "   if (shiftCount <0) {\r"
    "\n"
    "      if (aExp == 0xFF && aFrac != 0u)\r"
    "\n"
    "         return default_NegNaN;\r"
    "\n"
    "      return mix(default_NegNaN, default_PosNaN, aSign == 0u);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   aFrac = mix(aFrac, aFrac | 0x00800000u, aExp != 0);\r"
    "\n"
    "   __shortShift64Left(aFrac, 0, 40, zFrac0, zFrac1);\r"
    "\n"
    "\r"
    "\n"
    "   if (shiftCount != 0) {\r"
    "\n"
    "      __shift64ExtraRightJamming(zFrac0, zFrac1, zFrac2, shiftCount,\r"
    "\n"
    "                                 zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   return __roundAndPackInt64(aSign, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__int64_to_fp64(int64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   if (a==0)\r"
    "\n"
    "      return 0ul;\r"
    "\n"
    "\r"
    "\n"
    "   uint64_t absA = mix(uint64_t(a), uint64_t(-a), a < 0);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(absA);\r"
    "\n"
    "   uvec2 aFrac = unpackUint2x32(absA);\r"
    "\n"
    "   uint zSign = uint(a < 0);\r"
    "\n"
    "\r"
    "\n"
    "   if ((aFracHi & 0x80000000u) != 0u) {\r"
    "\n"
    "      return mix(0ul, __packFloat64(1, 0x434, 0u, 0u), a < 0);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   return __normalizeRoundAndPackFloat64(zSign, 0x432, aFrac.y, aFrac.x);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of converting the double-precision floating-point value\r"
    "\n"
    " * `a' to the 32-bit two's complement integer format.  The conversion is\r"
    "\n"
    " * performed according to the IEEE Standard for Floating-Point Arithmetic---\r"
    "\n"
    " * which means in particular that the conversion is rounded according to the\r"
    "\n"
    " * current rounding mode.  If `a' is a NaN, the largest positive integer is\r"
    "\n"
    " * returned.  Otherwise, if the conversion overflows, the largest integer with\r"
    "\n"
    " * the same sign as `a' is returned.\r"
    "\n"
    " */\r"
    "\n"
    "int\r"
    "\n"
    "__fp64_to_int(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "\r"
    "\n"
    "   uint absZ = 0u;\r"
    "\n"
    "   uint aFracExtra = 0u;\r"
    "\n"
    "   int shiftCount = aExp - 0x413;\r"
    "\n"
    "\r"
    "\n"
    "   if (0 <= shiftCount) {\r"
    "\n"
    "      if (0x41E < aExp) {\r"
    "\n"
    "         if ((aExp == 0x7FF) && bool(aFracHi | aFracLo))\r"
    "\n"
    "            aSign = 0u;\r"
    "\n"
    "         return mix(0x7FFFFFFF, 0x80000000, bool(aSign));\r"
    "\n"
    "      }\r"
    "\n"
    "      __shortShift64Left(aFracHi | 0x00100000u, aFracLo, shiftCount, absZ, aFracExtra);\r"
    "\n"
    "   } else {\r"
    "\n"
    "      if (aExp < 0x3FF)\r"
    "\n"
    "         return 0;\r"
    "\n"
    "\r"
    "\n"
    "      aFracHi |= 0x00100000u;\r"
    "\n"
    "      aFracExtra = ( aFracHi << (shiftCount & 31)) | aFracLo;\r"
    "\n"
    "      absZ = aFracHi >> (- shiftCount);\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   int z = mix(int(absZ), -int(absZ), (aSign != 0u));\r"
    "\n"
    "   int nan = mix(0x7FFFFFFF, 0x80000000, bool(aSign));\r"
    "\n"
    "   return mix(z, nan, bool(aSign ^ uint(z < 0)) && bool(z));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of converting the 32-bit two's complement integer `a'\r"
    "\n"
    " * to the double-precision floating-point format.  The conversion is performed\r"
    "\n"
    " * according to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__int_to_fp64(int a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   if (a==0)\r"
    "\n"
    "      return __packFloat64(0u, 0, 0u, 0u);\r"
    "\n"
    "   uint zSign = uint(a < 0);\r"
    "\n"
    "   uint absA = mix(uint(a), uint(-a), a < 0);\r"
    "\n"
    "   int shiftCount = __countLeadingZeros32(absA) - 11;\r"
    "\n"
    "   if (0 <= shiftCount) {\r"
    "\n"
    "      zFrac0 = absA << shiftCount;\r"
    "\n"
    "      zFrac1 = 0u;\r"
    "\n"
    "   } else {\r"
    "\n"
    "      __shift64Right(absA, 0u, -shiftCount, zFrac0, zFrac1);\r"
    "\n"
    "   }\r"
    "\n"
    "   return __packFloat64(zSign, 0x412 - shiftCount, zFrac0, zFrac1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "bool\r"
    "\n"
    "__fp64_to_bool(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   return !__feq64_nonnan(__fabs64(a), 0ul);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__bool_to_fp64(bool a)\r"
    "\n"
    "{\r"
    "\n"
    "   return __int_to_fp64(int(a));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Packs the sign `zSign', exponent `zExp', and significand `zFrac' into a\r"
    "\n"
    " * single-precision floating-point value, returning the result.  After being\r"
    "\n"
    " * shifted into the proper positions, the three fields are simply added\r"
    "\n"
    " * together to form the result.  This means that any integer portion of `zSig'\r"
    "\n"
    " * will be added into the exponent.  Since a properly normalized significand\r"
    "\n"
    " * will have an integer portion equal to 1, the `zExp' input should be 1 less\r"
    "\n"
    " * than the desired result exponent whenever `zFrac' is a complete, normalized\r"
    "\n"
    " * significand.\r"
    "\n"
    " */\r"
    "\n"
    "float\r"
    "\n"
    "__packFloat32(uint zSign, int zExp, uint zFrac)\r"
    "\n"
    "{\r"
    "\n"
    "   return uintBitsToFloat((zSign<<31) + (uint(zExp)<<23) + zFrac);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Takes an abstract floating-point value having sign `zSign', exponent `zExp',\r"
    "\n"
    " * and significand `zFrac', and returns the proper single-precision floating-\r"
    "\n"
    " * point value corresponding to the abstract input.  Ordinarily, the abstract\r"
    "\n"
    " * value is simply rounded and packed into the single-precision format, with\r"
    "\n"
    " * the inexact exception raised if the abstract input cannot be represented\r"
    "\n"
    " * exactly.  However, if the abstract value is too large, the overflow and\r"
    "\n"
    " * inexact exceptions are raised and an infinity or maximal finite value is\r"
    "\n"
    " * returned.  If the abstract value is too small, the input value is rounded to\r"
    "\n"
    " * a subnormal number, and the underflow and inexact exceptions are raised if\r"
    "\n"
    " * the abstract input cannot be represented exactly as a subnormal single-\r"
    "\n"
    " * precision floating-point number.\r"
    "\n"
    " *     The input significand `zFrac' has its binary point between bits 30\r"
    "\n"
    " * and 29, which is 7 bits to the left of the usual location.  This shifted\r"
    "\n"
    " * significand must be normalized or smaller.  If `zFrac' is not normalized,\r"
    "\n"
    " * `zExp' must be 0; in that case, the result returned is a subnormal number,\r"
    "\n"
    " * and it must not require rounding.  In the usual case that `zFrac' is\r"
    "\n"
    " * normalized, `zExp' must be 1 less than the \"true\" floating-point exponent.\r"
    "\n"
    " * The handling of underflow and overflow follows the IEEE Standard for\r"
    "\n"
    " * Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "float\r"
    "\n"
    "__roundAndPackFloat32(uint zSign, int zExp, uint zFrac)\r"
    "\n"
    "{\r"
    "\n"
    "   bool roundNearestEven;\r"
    "\n"
    "   int roundIncrement;\r"
    "\n"
    "   int roundBits;\r"
    "\n"
    "\r"
    "\n"
    "   roundNearestEven = FLOAT_ROUNDING_MODE == FLOAT_ROUND_NEAREST_EVEN;\r"
    "\n"
    "   roundIncrement = 0x40;\r"
    "\n"
    "   if (!roundNearestEven) {\r"
    "\n"
    "      if (FLOAT_ROUNDING_MODE == FLOAT_ROUND_TO_ZERO) {\r"
    "\n"
    "         roundIncrement = 0;\r"
    "\n"
    "      } else {\r"
    "\n"
    "         roundIncrement = 0x7F;\r"
    "\n"
    "         if (zSign != 0u) {\r"
    "\n"
    "            if (FLOAT_ROUNDING_MODE == FLOAT_ROUND_UP)\r"
    "\n"
    "               roundIncrement = 0;\r"
    "\n"
    "         } else {\r"
    "\n"
    "            if (FLOAT_ROUNDING_MODE == FLOAT_ROUND_DOWN)\r"
    "\n"
    "               roundIncrement = 0;\r"
    "\n"
    "         }\r"
    "\n"
    "      }\r"
    "\n"
    "   }\r"
    "\n"
    "   roundBits = int(zFrac & 0x7Fu);\r"
    "\n"
    "   if (0xFDu <= uint(zExp)) {\r"
    "\n"
    "      if ((0xFD < zExp) || ((zExp == 0xFD) && (int(zFrac) + roundIncrement) < 0))\r"
    "\n"
    "         return __packFloat32(zSign, 0xFF, 0u) - float(roundIncrement == 0);\r"
    "\n"
    "      int count = -zExp;\r"
    "\n"
    "      bool zexp_lt0 = zExp < 0;\r"
    "\n"
    "      uint zFrac_lt0 = mix(uint(zFrac != 0u), (zFrac>>count) | uint((zFrac<<((-count) & 31)) != 0u), (-zExp) < 32);\r"
    "\n"
    "      zFrac = mix(zFrac, zFrac_lt0, zexp_lt0);\r"
    "\n"
    "      roundBits = mix(roundBits, int(zFrac) & 0x7f, zexp_lt0);\r"
    "\n"
    "      zExp = mix(zExp, 0, zexp_lt0);\r"
    "\n"
    "   }\r"
    "\n"
    "   zFrac = (zFrac + uint(roundIncrement))>>7;\r"
    "\n"
    "   zFrac &= ~uint(((roundBits ^ 0x40) == 0) && roundNearestEven);\r"
    "\n"
    "\r"
    "\n"
    "   return __packFloat32(zSign, mix(zExp, 0, zFrac == 0u), zFrac);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of converting the double-precision floating-point value\r"
    "\n"
    " * `a' to the single-precision floating-point format.  The conversion is\r"
    "\n"
    " * performed according to the IEEE Standard for Floating-Point Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "float\r"
    "\n"
    "__fp64_to_fp32(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   uint zFrac = 0u;\r"
    "\n"
    "   uint allZero = 0u;\r"
    "\n"
    "\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(__a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(__a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(__a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(__a);\r"
    "\n"
    "   if (aExp == 0x7FF) {\r"
    "\n"
    "      __shortShift64Left(a.y, a.x, 12, a.y, a.x);\r"
    "\n"
    "      float rval = uintBitsToFloat((aSign<<31) | 0x7FC00000u | (a.y>>9));\r"
    "\n"
    "      rval = mix(__packFloat32(aSign, 0xFF, 0u), rval, (aFracHi | aFracLo) != 0u);\r"
    "\n"
    "      return rval;\r"
    "\n"
    "   }\r"
    "\n"
    "   __shift64RightJamming(aFracHi, aFracLo, 22, allZero, zFrac);\r"
    "\n"
    "   zFrac = mix(zFrac, zFrac | 0x40000000u, aExp != 0);\r"
    "\n"
    "   return __roundAndPackFloat32(aSign, aExp - 0x381, zFrac);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "float\r"
    "\n"
    "__uint64_to_fp32(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 aFrac = unpackUint2x32(__a);\r"
    "\n"
    "   int shiftCount = mix(__countLeadingZeros32(aFrac.y) - 33,\r"
    "\n"
    "                        __countLeadingZeros32(aFrac.x) - 1,\r"
    "\n"
    "                        aFrac.y == 0u);\r"
    "\n"
    "\r"
    "\n"
    "   if (0 <= shiftCount)\r"
    "\n"
    "      __shortShift64Left(aFrac.y, aFrac.x, shiftCount, aFrac.y, aFrac.x);\r"
    "\n"
    "   else\r"
    "\n"
    "      __shift64RightJamming(aFrac.y, aFrac.x, -shiftCount, aFrac.y, aFrac.x);\r"
    "\n"
    "\r"
    "\n"
    "   return __roundAndPackFloat32(0u, 0x9C - shiftCount, aFrac.x);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "float\r"
    "\n"
    "__int64_to_fp32(int64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint aSign = uint(__a < 0);\r"
    "\n"
    "   uint64_t absA = mix(uint64_t(__a), uint64_t(-__a), __a < 0);\r"
    "\n"
    "   uvec2 aFrac = unpackUint2x32(absA);\r"
    "\n"
    "   int shiftCount = mix(__countLeadingZeros32(aFrac.y) - 33,\r"
    "\n"
    "                        __countLeadingZeros32(aFrac.x) - 1,\r"
    "\n"
    "                        aFrac.y == 0u);\r"
    "\n"
    "\r"
    "\n"
    "   if (0 <= shiftCount)\r"
    "\n"
    "      __shortShift64Left(aFrac.y, aFrac.x, shiftCount, aFrac.y, aFrac.x);\r"
    "\n"
    "   else\r"
    "\n"
    "      __shift64RightJamming(aFrac.y, aFrac.x, -shiftCount, aFrac.y, aFrac.x);\r"
    "\n"
    "\r"
    "\n"
    "   return __roundAndPackFloat32(aSign, 0x9C - shiftCount, aFrac.x);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the result of converting the single-precision floating-point value\r"
    "\n"
    " * `a' to the double-precision floating-point format.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fp32_to_fp64(float f)\r"
    "\n"
    "{\r"
    "\n"
    "   uint a = floatBitsToUint(f);\r"
    "\n"
    "   uint aFrac = a & 0x007FFFFFu;\r"
    "\n"
    "   int aExp = int((a>>23) & 0xFFu);\r"
    "\n"
    "   uint aSign = a>>31;\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "\r"
    "\n"
    "   if (aExp == 0xFF) {\r"
    "\n"
    "      if (aFrac != 0u) {\r"
    "\n"
    "         uint nanLo = 0u;\r"
    "\n"
    "         uint nanHi = a<<9;\r"
    "\n"
    "         __shift64Right(nanHi, nanLo, 12, nanHi, nanLo);\r"
    "\n"
    "         nanHi |= ((aSign<<31) | 0x7FF80000u);\r"
    "\n"
    "         return packUint2x32(uvec2(nanLo, nanHi));\r"
    "\n"
    "      }\r"
    "\n"
    "      return __packFloat64(aSign, 0x7FF, 0u, 0u);\r"
    "\n"
    "    }\r"
    "\n"
    "\r"
    "\n"
    "   if (aExp == 0) {\r"
    "\n"
    "      if (aFrac == 0u)\r"
    "\n"
    "         return __packFloat64(aSign, 0, 0u, 0u);\r"
    "\n"
    "      /* Normalize subnormal */\r"
    "\n"
    "      int shiftCount = __countLeadingZeros32(aFrac) - 8;\r"
    "\n"
    "      aFrac <<= shiftCount;\r"
    "\n"
    "      aExp = 1 - shiftCount;\r"
    "\n"
    "      --aExp;\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   __shift64Right(aFrac, 0u, 3, zFrac0, zFrac1);\r"
    "\n"
    "   return __packFloat64(aSign, aExp + 0x380, zFrac0, zFrac1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Adds the 96-bit value formed by concatenating `a0', `a1', and `a2' to the\r"
    "\n"
    " * 96-bit value formed by concatenating `b0', `b1', and `b2'.  Addition is\r"
    "\n"
    " * modulo 2^96, so any carry out is lost.  The result is broken into three\r"
    "\n"
    " * 32-bit pieces which are stored at the locations pointed to by `z0Ptr',\r"
    "\n"
    " * `z1Ptr', and `z2Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__add96(uint a0, uint a1, uint a2,\r"
    "\n"
    "        uint b0, uint b1, uint b2,\r"
    "\n"
    "        out uint z0Ptr,\r"
    "\n"
    "        out uint z1Ptr,\r"
    "\n"
    "        out uint z2Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z2 = a2 + b2;\r"
    "\n"
    "   uint carry1 = uint(z2 < a2);\r"
    "\n"
    "   uint z1 = a1 + b1;\r"
    "\n"
    "   uint carry0 = uint(z1 < a1);\r"
    "\n"
    "   uint z0 = a0 + b0;\r"
    "\n"
    "   z1 += carry1;\r"
    "\n"
    "   z0 += uint(z1 < carry1);\r"
    "\n"
    "   z0 += carry0;\r"
    "\n"
    "   z2Ptr = z2;\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Subtracts the 96-bit value formed by concatenating `b0', `b1', and `b2' from\r"
    "\n"
    " * the 96-bit value formed by concatenating `a0', `a1', and `a2'.  Subtraction\r"
    "\n"
    " * is modulo 2^96, so any borrow out (carry out) is lost.  The result is broken\r"
    "\n"
    " * into three 32-bit pieces which are stored at the locations pointed to by\r"
    "\n"
    " * `z0Ptr', `z1Ptr', and `z2Ptr'.\r"
    "\n"
    " */\r"
    "\n"
    "void\r"
    "\n"
    "__sub96(uint a0, uint a1, uint a2,\r"
    "\n"
    "        uint b0, uint b1, uint b2,\r"
    "\n"
    "        out uint z0Ptr,\r"
    "\n"
    "        out uint z1Ptr,\r"
    "\n"
    "        out uint z2Ptr)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z2 = a2 - b2;\r"
    "\n"
    "   uint borrow1 = uint(a2 < b2);\r"
    "\n"
    "   uint z1 = a1 - b1;\r"
    "\n"
    "   uint borrow0 = uint(a1 < b1);\r"
    "\n"
    "   uint z0 = a0 - b0;\r"
    "\n"
    "   z0 -= uint(z1 < borrow1);\r"
    "\n"
    "   z1 -= borrow1;\r"
    "\n"
    "   z0 -= borrow0;\r"
    "\n"
    "   z2Ptr = z2;\r"
    "\n"
    "   z1Ptr = z1;\r"
    "\n"
    "   z0Ptr = z0;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns an approximation to the 32-bit integer quotient obtained by dividing\r"
    "\n"
    " * `b' into the 64-bit value formed by concatenating `a0' and `a1'.  The\r"
    "\n"
    " * divisor `b' must be at least 2^31.  If q is the exact quotient truncated\r"
    "\n"
    " * toward zero, the approximation returned lies between q and q + 2 inclusive.\r"
    "\n"
    " * If the exact quotient q is larger than 32 bits, the maximum positive 32-bit\r"
    "\n"
    " * unsigned integer is returned.\r"
    "\n"
    " */\r"
    "\n"
    "uint\r"
    "\n"
    "__estimateDiv64To32(uint a0, uint a1, uint b)\r"
    "\n"
    "{\r"
    "\n"
    "   uint b0;\r"
    "\n"
    "   uint b1;\r"
    "\n"
    "   uint rem0 = 0u;\r"
    "\n"
    "   uint rem1 = 0u;\r"
    "\n"
    "   uint term0 = 0u;\r"
    "\n"
    "   uint term1 = 0u;\r"
    "\n"
    "   uint z;\r"
    "\n"
    "\r"
    "\n"
    "   if (b <= a0)\r"
    "\n"
    "      return 0xFFFFFFFFu;\r"
    "\n"
    "   b0 = b>>16;\r"
    "\n"
    "   z = (b0<<16 <= a0) ? 0xFFFF0000u : (a0 / b0)<<16;\r"
    "\n"
    "   __mul32To64(b, z, term0, term1);\r"
    "\n"
    "   __sub64(a0, a1, term0, term1, rem0, rem1);\r"
    "\n"
    "   while (int(rem0) < 0) {\r"
    "\n"
    "      z -= 0x10000u;\r"
    "\n"
    "      b1 = b<<16;\r"
    "\n"
    "      __add64(rem0, rem1, b0, b1, rem0, rem1);\r"
    "\n"
    "   }\r"
    "\n"
    "   rem0 = (rem0<<16) | (rem1>>16);\r"
    "\n"
    "   z |= (b0<<16 <= rem0) ? 0xFFFFu : rem0 / b0;\r"
    "\n"
    "   return z;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint\r"
    "\n"
    "__sqrtOddAdjustments(int index)\r"
    "\n"
    "{\r"
    "\n"
    "   uint res = 0u;\r"
    "\n"
    "   if (index == 0)\r"
    "\n"
    "      res = 0x0004u;\r"
    "\n"
    "   if (index == 1)\r"
    "\n"
    "      res = 0x0022u;\r"
    "\n"
    "   if (index == 2)\r"
    "\n"
    "      res = 0x005Du;\r"
    "\n"
    "   if (index == 3)\r"
    "\n"
    "      res = 0x00B1u;\r"
    "\n"
    "   if (index == 4)\r"
    "\n"
    "      res = 0x011Du;\r"
    "\n"
    "   if (index == 5)\r"
    "\n"
    "      res = 0x019Fu;\r"
    "\n"
    "   if (index == 6)\r"
    "\n"
    "      res = 0x0236u;\r"
    "\n"
    "   if (index == 7)\r"
    "\n"
    "      res = 0x02E0u;\r"
    "\n"
    "   if (index == 8)\r"
    "\n"
    "      res = 0x039Cu;\r"
    "\n"
    "   if (index == 9)\r"
    "\n"
    "      res = 0x0468u;\r"
    "\n"
    "   if (index == 10)\r"
    "\n"
    "      res = 0x0545u;\r"
    "\n"
    "   if (index == 11)\r"
    "\n"
    "      res = 0x631u;\r"
    "\n"
    "   if (index == 12)\r"
    "\n"
    "      res = 0x072Bu;\r"
    "\n"
    "   if (index == 13)\r"
    "\n"
    "      res = 0x0832u;\r"
    "\n"
    "   if (index == 14)\r"
    "\n"
    "      res = 0x0946u;\r"
    "\n"
    "   if (index == 15)\r"
    "\n"
    "      res = 0x0A67u;\r"
    "\n"
    "\r"
    "\n"
    "   return res;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint\r"
    "\n"
    "__sqrtEvenAdjustments(int index)\r"
    "\n"
    "{\r"
    "\n"
    "   uint res = 0u;\r"
    "\n"
    "   if (index == 0)\r"
    "\n"
    "      res = 0x0A2Du;\r"
    "\n"
    "   if (index == 1)\r"
    "\n"
    "      res = 0x08AFu;\r"
    "\n"
    "   if (index == 2)\r"
    "\n"
    "      res = 0x075Au;\r"
    "\n"
    "   if (index == 3)\r"
    "\n"
    "      res = 0x0629u;\r"
    "\n"
    "   if (index == 4)\r"
    "\n"
    "      res = 0x051Au;\r"
    "\n"
    "   if (index == 5)\r"
    "\n"
    "      res = 0x0429u;\r"
    "\n"
    "   if (index == 6)\r"
    "\n"
    "      res = 0x0356u;\r"
    "\n"
    "   if (index == 7)\r"
    "\n"
    "      res = 0x029Eu;\r"
    "\n"
    "   if (index == 8)\r"
    "\n"
    "      res = 0x0200u;\r"
    "\n"
    "   if (index == 9)\r"
    "\n"
    "      res = 0x0179u;\r"
    "\n"
    "   if (index == 10)\r"
    "\n"
    "      res = 0x0109u;\r"
    "\n"
    "   if (index == 11)\r"
    "\n"
    "      res = 0x00AFu;\r"
    "\n"
    "   if (index == 12)\r"
    "\n"
    "      res = 0x0068u;\r"
    "\n"
    "   if (index == 13)\r"
    "\n"
    "      res = 0x0034u;\r"
    "\n"
    "   if (index == 14)\r"
    "\n"
    "      res = 0x0012u;\r"
    "\n"
    "   if (index == 15)\r"
    "\n"
    "      res = 0x0002u;\r"
    "\n"
    "\r"
    "\n"
    "   return res;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns an approximation to the square root of the 32-bit significand given\r"
    "\n"
    " * by `a'.  Considered as an integer, `a' must be at least 2^31.  If bit 0 of\r"
    "\n"
    " * `aExp' (the least significant bit) is 1, the integer returned approximates\r"
    "\n"
    " * 2^31*sqrt(`a'/2^31), where `a' is considered an integer.  If bit 0 of `aExp'\r"
    "\n"
    " * is 0, the integer returned approximates 2^31*sqrt(`a'/2^30).  In either\r"
    "\n"
    " * case, the approximation returned lies strictly within +/-2 of the exact\r"
    "\n"
    " * value.\r"
    "\n"
    " */\r"
    "\n"
    "uint\r"
    "\n"
    "__estimateSqrt32(int aExp, uint a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint z;\r"
    "\n"
    "\r"
    "\n"
    "   int index = int(a>>27 & 15u);\r"
    "\n"
    "   if ((aExp & 1) != 0) {\r"
    "\n"
    "      z = 0x4000u + (a>>17) - __sqrtOddAdjustments(index);\r"
    "\n"
    "      z = ((a / z)<<14) + (z<<15);\r"
    "\n"
    "      a >>= 1;\r"
    "\n"
    "   } else {\r"
    "\n"
    "      z = 0x8000u + (a>>17) - __sqrtEvenAdjustments(index);\r"
    "\n"
    "      z = a / z + z;\r"
    "\n"
    "      z = (0x20000u <= z) ? 0xFFFF8000u : (z<<15);\r"
    "\n"
    "      if (z <= a)\r"
    "\n"
    "         return uint(int(a)>>1);\r"
    "\n"
    "   }\r"
    "\n"
    "   return ((__estimateDiv64To32(a, 0u, z))>>1) + (z>>1);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "/* Returns the square root of the double-precision floating-point value `a'.\r"
    "\n"
    " * The operation is performed according to the IEEE Standard for Floating-Point\r"
    "\n"
    " * Arithmetic.\r"
    "\n"
    " */\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fsqrt64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   uint zFrac0 = 0u;\r"
    "\n"
    "   uint zFrac1 = 0u;\r"
    "\n"
    "   uint zFrac2 = 0u;\r"
    "\n"
    "   uint doubleZFrac0 = 0u;\r"
    "\n"
    "   uint rem0 = 0u;\r"
    "\n"
    "   uint rem1 = 0u;\r"
    "\n"
    "   uint rem2 = 0u;\r"
    "\n"
    "   uint rem3 = 0u;\r"
    "\n"
    "   uint term0 = 0u;\r"
    "\n"
    "   uint term1 = 0u;\r"
    "\n"
    "   uint term2 = 0u;\r"
    "\n"
    "   uint term3 = 0u;\r"
    "\n"
    "   uint64_t default_nan = 0xFFFFFFFFFFFFFFFFUL;\r"
    "\n"
    "\r"
    "\n"
    "   uint aFracLo = __extractFloat64FracLo(a);\r"
    "\n"
    "   uint aFracHi = __extractFloat64FracHi(a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(a);\r"
    "\n"
    "   uint aSign = __extractFloat64Sign(a);\r"
    "\n"
    "   if (aExp == 0x7FF) {\r"
    "\n"
    "      if ((aFracHi | aFracLo) != 0u)\r"
    "\n"
    "         return __propagateFloat64NaN(a, a);\r"
    "\n"
    "      if (aSign == 0u)\r"
    "\n"
    "         return a;\r"
    "\n"
    "      return default_nan;\r"
    "\n"
    "   }\r"
    "\n"
    "   if (aSign != 0u) {\r"
    "\n"
    "      if ((uint(aExp) | aFracHi | aFracLo) == 0u)\r"
    "\n"
    "         return a;\r"
    "\n"
    "      return default_nan;\r"
    "\n"
    "   }\r"
    "\n"
    "   if (aExp == 0) {\r"
    "\n"
    "      if ((aFracHi | aFracLo) == 0u)\r"
    "\n"
    "         return __packFloat64(0u, 0, 0u, 0u);\r"
    "\n"
    "      __normalizeFloat64Subnormal(aFracHi, aFracLo, aExp, aFracHi, aFracLo);\r"
    "\n"
    "   }\r"
    "\n"
    "   int zExp = ((aExp - 0x3FF)>>1) + 0x3FE;\r"
    "\n"
    "   aFracHi |= 0x00100000u;\r"
    "\n"
    "   __shortShift64Left(aFracHi, aFracLo, 11, term0, term1);\r"
    "\n"
    "   zFrac0 = (__estimateSqrt32(aExp, term0)>>1) + 1u;\r"
    "\n"
    "   if (zFrac0 == 0u)\r"
    "\n"
    "      zFrac0 = 0x7FFFFFFFu;\r"
    "\n"
    "   doubleZFrac0 = zFrac0 + zFrac0;\r"
    "\n"
    "   __shortShift64Left(aFracHi, aFracLo, 9 - (aExp & 1), aFracHi, aFracLo);\r"
    "\n"
    "   __mul32To64(zFrac0, zFrac0, term0, term1);\r"
    "\n"
    "   __sub64(aFracHi, aFracLo, term0, term1, rem0, rem1);\r"
    "\n"
    "   while (int(rem0) < 0) {\r"
    "\n"
    "      --zFrac0;\r"
    "\n"
    "      doubleZFrac0 -= 2u;\r"
    "\n"
    "      __add64(rem0, rem1, 0u, doubleZFrac0 | 1u, rem0, rem1);\r"
    "\n"
    "   }\r"
    "\n"
    "   zFrac1 = __estimateDiv64To32(rem1, 0u, doubleZFrac0);\r"
    "\n"
    "   if ((zFrac1 & 0x1FFu) <= 5u) {\r"
    "\n"
    "      if (zFrac1 == 0u)\r"
    "\n"
    "         zFrac1 = 1u;\r"
    "\n"
    "      __mul32To64(doubleZFrac0, zFrac1, term1, term2);\r"
    "\n"
    "      __sub64(rem1, 0u, term1, term2, rem1, rem2);\r"
    "\n"
    "      __mul32To64(zFrac1, zFrac1, term2, term3);\r"
    "\n"
    "      __sub96(rem1, rem2, 0u, 0u, term2, term3, rem1, rem2, rem3);\r"
    "\n"
    "      while (int(rem1) < 0) {\r"
    "\n"
    "         --zFrac1;\r"
    "\n"
    "         __shortShift64Left(0u, zFrac1, 1, term2, term3);\r"
    "\n"
    "         term3 |= 1u;\r"
    "\n"
    "         term2 |= doubleZFrac0;\r"
    "\n"
    "         __add96(rem1, rem2, rem3, 0u, term2, term3, rem1, rem2, rem3);\r"
    "\n"
    "      }\r"
    "\n"
    "      zFrac1 |= uint((rem1 | rem2 | rem3) != 0u);\r"
    "\n"
    "   }\r"
    "\n"
    "   __shift64ExtraRightJamming(zFrac0, zFrac1, 0u, 10, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "   return __roundAndPackFloat64(0u, zExp, zFrac0, zFrac1, zFrac2);\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__ftrunc64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   int aExp = __extractFloat64Exp(__a);\r"
    "\n"
    "   uint zLo;\r"
    "\n"
    "   uint zHi;\r"
    "\n"
    "\r"
    "\n"
    "   int unbiasedExp = aExp - 1023;\r"
    "\n"
    "   int fracBits = 52 - unbiasedExp;\r"
    "\n"
    "   uint maskLo = mix(~0u << fracBits, 0u, fracBits >= 32);\r"
    "\n"
    "   uint maskHi = mix(~0u << (fracBits - 32), ~0u, fracBits < 33);\r"
    "\n"
    "   zLo = maskLo & a.x;\r"
    "\n"
    "   zHi = maskHi & a.y;\r"
    "\n"
    "\r"
    "\n"
    "   zLo = mix(zLo, 0u, unbiasedExp < 0);\r"
    "\n"
    "   zHi = mix(zHi, 0u, unbiasedExp < 0);\r"
    "\n"
    "   zLo = mix(zLo, a.x, unbiasedExp > 52);\r"
    "\n"
    "   zHi = mix(zHi, a.y, unbiasedExp > 52);\r"
    "\n"
    "   return packUint2x32(uvec2(zLo, zHi));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__ffloor64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   bool is_positive = __fge64(a, 0ul);\r"
    "\n"
    "   uint64_t tr = __ftrunc64(a);\r"
    "\n"
    "\r"
    "\n"
    "   if (is_positive || __feq64(tr, a)) {\r"
    "\n"
    "      return tr;\r"
    "\n"
    "   } else {\r"
    "\n"
    "      return __fadd64(tr, 0xbff0000000000000ul /* -1.0 */);\r"
    "\n"
    "   }\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fround64(uint64_t __a)\r"
    "\n"
    "{\r"
    "\n"
    "   uvec2 a = unpackUint2x32(__a);\r"
    "\n"
    "   int unbiasedExp = __extractFloat64Exp(__a) - 1023;\r"
    "\n"
    "   uint aHi = a.y;\r"
    "\n"
    "   uint aLo = a.x;\r"
    "\n"
    "\r"
    "\n"
    "   if (unbiasedExp < 20) {\r"
    "\n"
    "      if (unbiasedExp < 0) {\r"
    "\n"
    "         if ((aHi & 0x80000000u) != 0u && aLo == 0u) {\r"
    "\n"
    "            return 0;\r"
    "\n"
    "         }\r"
    "\n"
    "         aHi &= 0x80000000u;\r"
    "\n"
    "         if ((a.y & 0x000FFFFFu) == 0u && a.x == 0u) {\r"
    "\n"
    "            aLo = 0u;\r"
    "\n"
    "            return packUint2x32(uvec2(aLo, aHi));\r"
    "\n"
    "         }\r"
    "\n"
    "         aHi = mix(aHi, (aHi | 0x3FF00000u), unbiasedExp == -1);\r"
    "\n"
    "         aLo = 0u;\r"
    "\n"
    "      } else {\r"
    "\n"
    "         uint maskExp = 0x000FFFFFu >> unbiasedExp;\r"
    "\n"
    "         uint lastBit = maskExp + 1;\r"
    "\n"
    "         aHi += 0x00080000u >> unbiasedExp;\r"
    "\n"
    "         if ((aHi & maskExp) == 0u)\r"
    "\n"
    "            aHi &= ~lastBit;\r"
    "\n"
    "         aHi &= ~maskExp;\r"
    "\n"
    "         aLo = 0u;\r"
    "\n"
    "      }\r"
    "\n"
    "   } else if (unbiasedExp > 51 || unbiasedExp == 1024) {\r"
    "\n"
    "      return __a;\r"
    "\n"
    "   } else {\r"
    "\n"
    "      uint maskExp = 0xFFFFFFFFu >> (unbiasedExp - 20);\r"
    "\n"
    "      if ((aLo & maskExp) == 0u)\r"
    "\n"
    "         return __a;\r"
    "\n"
    "      uint tmp = aLo + (1u << (51 - unbiasedExp));\r"
    "\n"
    "      if(tmp < aLo)\r"
    "\n"
    "         aHi += 1u;\r"
    "\n"
    "      aLo = tmp;\r"
    "\n"
    "      aLo &= ~maskExp;\r"
    "\n"
    "   }\r"
    "\n"
    "\r"
    "\n"
    "   return packUint2x32(uvec2(aLo, aHi));\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fmin64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a)) return b;\r"
    "\n"
    "   if (__is_nan(b)) return a;\r"
    "\n"
    "\r"
    "\n"
    "   if (__flt64_nonnan(a, b)) return a;\r"
    "\n"
    "   return b;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__fmax64(uint64_t a, uint64_t b)\r"
    "\n"
    "{\r"
    "\n"
    "   if (__is_nan(a)) return b;\r"
    "\n"
    "   if (__is_nan(b)) return a;\r"
    "\n"
    "\r"
    "\n"
    "   if (__flt64_nonnan(a, b)) return b;\r"
    "\n"
    "   return a;\r"
    "\n"
    "}\r"
    "\n"
    "\r"
    "\n"
    "uint64_t\r"
    "\n"
    "__ffract64(uint64_t a)\r"
    "\n"
    "{\r"
    "\n"
    "   return __fadd64(a, __fneg64(__ffloor64(a)));\r"
    "\n"
    "}\r"
    "\n"
    ""
    ;
