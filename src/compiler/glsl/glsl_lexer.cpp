#line 1 "glsl/glsl_lexer.cpp"

#line 3 "glsl/glsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define _mesa_glsl_lexer__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer _mesa_glsl_lexer__create_buffer
#endif

#ifdef yy_delete_buffer
#define _mesa_glsl_lexer__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer _mesa_glsl_lexer__delete_buffer
#endif

#ifdef yy_scan_buffer
#define _mesa_glsl_lexer__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer _mesa_glsl_lexer__scan_buffer
#endif

#ifdef yy_scan_string
#define _mesa_glsl_lexer__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string _mesa_glsl_lexer__scan_string
#endif

#ifdef yy_scan_bytes
#define _mesa_glsl_lexer__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes _mesa_glsl_lexer__scan_bytes
#endif

#ifdef yy_init_buffer
#define _mesa_glsl_lexer__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer _mesa_glsl_lexer__init_buffer
#endif

#ifdef yy_flush_buffer
#define _mesa_glsl_lexer__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer _mesa_glsl_lexer__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define _mesa_glsl_lexer__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state _mesa_glsl_lexer__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define _mesa_glsl_lexer__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer _mesa_glsl_lexer__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define _mesa_glsl_lexer_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state _mesa_glsl_lexer_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define _mesa_glsl_lexer_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state _mesa_glsl_lexer_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define _mesa_glsl_lexer_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack _mesa_glsl_lexer_ensure_buffer_stack
#endif

#ifdef yylex
#define _mesa_glsl_lexer_lex_ALREADY_DEFINED
#else
#define yylex _mesa_glsl_lexer_lex
#endif

#ifdef yyrestart
#define _mesa_glsl_lexer_restart_ALREADY_DEFINED
#else
#define yyrestart _mesa_glsl_lexer_restart
#endif

#ifdef yylex_init
#define _mesa_glsl_lexer_lex_init_ALREADY_DEFINED
#else
#define yylex_init _mesa_glsl_lexer_lex_init
#endif

#ifdef yylex_init_extra
#define _mesa_glsl_lexer_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra _mesa_glsl_lexer_lex_init_extra
#endif

#ifdef yylex_destroy
#define _mesa_glsl_lexer_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy _mesa_glsl_lexer_lex_destroy
#endif

#ifdef yyget_debug
#define _mesa_glsl_lexer_get_debug_ALREADY_DEFINED
#else
#define yyget_debug _mesa_glsl_lexer_get_debug
#endif

#ifdef yyset_debug
#define _mesa_glsl_lexer_set_debug_ALREADY_DEFINED
#else
#define yyset_debug _mesa_glsl_lexer_set_debug
#endif

#ifdef yyget_extra
#define _mesa_glsl_lexer_get_extra_ALREADY_DEFINED
#else
#define yyget_extra _mesa_glsl_lexer_get_extra
#endif

#ifdef yyset_extra
#define _mesa_glsl_lexer_set_extra_ALREADY_DEFINED
#else
#define yyset_extra _mesa_glsl_lexer_set_extra
#endif

#ifdef yyget_in
#define _mesa_glsl_lexer_get_in_ALREADY_DEFINED
#else
#define yyget_in _mesa_glsl_lexer_get_in
#endif

#ifdef yyset_in
#define _mesa_glsl_lexer_set_in_ALREADY_DEFINED
#else
#define yyset_in _mesa_glsl_lexer_set_in
#endif

#ifdef yyget_out
#define _mesa_glsl_lexer_get_out_ALREADY_DEFINED
#else
#define yyget_out _mesa_glsl_lexer_get_out
#endif

#ifdef yyset_out
#define _mesa_glsl_lexer_set_out_ALREADY_DEFINED
#else
#define yyset_out _mesa_glsl_lexer_set_out
#endif

#ifdef yyget_leng
#define _mesa_glsl_lexer_get_leng_ALREADY_DEFINED
#else
#define yyget_leng _mesa_glsl_lexer_get_leng
#endif

#ifdef yyget_text
#define _mesa_glsl_lexer_get_text_ALREADY_DEFINED
#else
#define yyget_text _mesa_glsl_lexer_get_text
#endif

#ifdef yyget_lineno
#define _mesa_glsl_lexer_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno _mesa_glsl_lexer_get_lineno
#endif

#ifdef yyset_lineno
#define _mesa_glsl_lexer_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno _mesa_glsl_lexer_set_lineno
#endif

#ifdef yyget_column
#define _mesa_glsl_lexer_get_column_ALREADY_DEFINED
#else
#define yyget_column _mesa_glsl_lexer_get_column
#endif

#ifdef yyset_column
#define _mesa_glsl_lexer_set_column_ALREADY_DEFINED
#else
#define yyset_column _mesa_glsl_lexer_set_column
#endif

#ifdef yywrap
#define _mesa_glsl_lexer_wrap_ALREADY_DEFINED
#else
#define yywrap _mesa_glsl_lexer_wrap
#endif

#ifdef yyget_lval
#define _mesa_glsl_lexer_get_lval_ALREADY_DEFINED
#else
#define yyget_lval _mesa_glsl_lexer_get_lval
#endif

#ifdef yyset_lval
#define _mesa_glsl_lexer_set_lval_ALREADY_DEFINED
#else
#define yyset_lval _mesa_glsl_lexer_set_lval
#endif

#ifdef yyget_lloc
#define _mesa_glsl_lexer_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc _mesa_glsl_lexer_get_lloc
#endif

#ifdef yyset_lloc
#define _mesa_glsl_lexer_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc _mesa_glsl_lexer_set_lloc
#endif

#ifdef yyalloc
#define _mesa_glsl_lexer_alloc_ALREADY_DEFINED
#else
#define yyalloc _mesa_glsl_lexer_alloc
#endif

#ifdef yyrealloc
#define _mesa_glsl_lexer_realloc_ALREADY_DEFINED
#else
#define yyrealloc _mesa_glsl_lexer_realloc
#endif

#ifdef yyfree
#define _mesa_glsl_lexer_free_ALREADY_DEFINED
#else
#define yyfree _mesa_glsl_lexer_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_glsl_lexer_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 277
#define YY_END_OF_BUFFER 278
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1096] =
    {   0,
        0,    0,   18,   18,    0,    0,  278,  276,    1,   25,
      276,  276,  276,  276,  276,  276,  275,  276,  182,  180,
      276,  276,  276,  274,  276,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  276,    1,  276,   24,   18,
       23,   24,   22,   21,   19,   20,   16,   15,    1,  164,
      173,  165,  176,  170,  159,  172,  160,  179,  184,  171,
      185,  182,    0,    0,  182,  182,    0,  182,  180,  180,
      180,  180,  168,  161,  163,  162,  169,  274,  177,  167,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,   34,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,   38,
      274,  274,   65,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  178,  166,
        1,    0,    0,    2,    0,    0,    0,    0,   18,   17,
       21,   20,    0,  184,    0,    0,  183,    0,  185,    0,
        0,    0,  186,  181,  174,  175,  274,  193,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,   37,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,   30,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   66,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,    0,    0,    0,    0,   17,
        0,  184,  188,    0,  183,    0,    0,    0,  185,  189,
      186,    0,    0,  181,  181,  181,  274,  274,  274,   28,

      274,  274,  274,  251,  244,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,   36,  196,  274,  274,
      274,  274,   73,  274,  274,  201,  214,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  211,  247,   53,   54,   55,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  199,  191,  274,  274,  274,   31,  274,  274,
      274,  274,  274,  274,  274,   50,   51,   52,  157,  274,
      274,  274,    0,    0,    0,    0,    0,  183,  187,  190,

      274,  274,  274,   32,  274,   41,   42,   43,  274,  194,
      274,  274,   27,  274,  274,  274,  225,  226,  227,  274,
      222,  223,  224,  274,  192,  274,  215,   29,  237,  238,
      239,  249,  219,  220,  221,  274,  274,  274,  274,   67,
      217,  274,  274,  274,  274,   44,   45,   46,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,   76,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  212,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  195,  274,  274,  246,   47,   48,   49,
      274,  274,   35,  274,    0,    0,    0,    0,  254,  274,

      274,   69,  274,  274,  252,  274,  274,  274,  274,  274,
      274,  213,  208,  257,  274,  274,  274,  274,  274,  274,
      274,  204,  274,  274,  274,  274,  158,   56,   57,   58,
       59,   60,   61,   62,   63,   64,  274,  274,  274,  274,
      218,  200,  274,  274,  206,  274,  274,  274,   40,  274,
      264,  155,  243,   74,  207,  156,  274,  255,  202,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
        0,    0,    0,    0,  274,  274,  274,  274,  274,  203,
       39,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      274,  267,  268,  269,  274,  274,  274,  274,  274,  112,

      113,  114,  274,  274,  266,  274,  274,  274,  248,  274,
      274,  274,  274,  111,  274,  274,  274,  274,  274,  274,
      274,  274,  197,  271,  272,  273,  274,  274,  274,  274,
      274,  274,   68,  274,  274,   70,  274,  274,    0,    0,
        0,    0,    0,  274,  274,   71,  149,   33,  209,  123,
      124,  125,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  205,  274,  274,  274,
      152,  263,  151,  274,  274,  274,  274,  274,  274,  274,
      274,  198,  134,  135,  136,  274,  274,  270,  216,  274,
      150,  274,    0,    0,    6,    0,    0,    0,   14,    3,

      274,   26,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  121,  274,  274,  274,  116,  210,   72,  274,  274,
      274,  274,  274,  245,  274,  253,  250,  258,   77,   78,
       79,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  153,    0,    0,    0,
        0,    0,    0,    0,    0,  274,  274,  274,  132,  274,
      274,  127,  274,  274,  274,  274,  274,  274,  274,  274,
       88,   89,   90,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  265,  274,  274,  143,
      274,  274,  138,   94,   95,   96,  274,  274,    4,    0,

        5,    0,    0,    0,    0,    0,    0,    0,  154,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  115,
      274,  117,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  100,  274,  274,  274,  274,   80,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,    0,    0,    0,    0,    0,  274,  274,  274,
      126,  128,  274,  118,  274,  119,  274,  274,  274,  274,
      274,  101,  274,  274,   91,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      137,  139,  274,  274,  274,  102,  274,  274,   97,    0,

        0,    0,    0,  129,  130,  274,  274,  274,  145,  274,
      274,  146,  274,  274,  274,  274,  274,  274,  274,   75,
      274,  274,  274,  274,  240,  274,  241,  256,  274,  274,
      274,  140,  141,  274,  274,  274,  274,  274,  274,  274,
      274,    0,    0,    0,    0,  274,  274,  274,  274,  122,
      120,  274,  274,  274,  259,  261,  274,   81,  274,   82,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  260,  262,  274,    0,    0,    0,    0,    0,  133,
      131,  274,  274,   92,   93,  274,  274,  274,   83,  274,
      274,  274,   84,  274,  274,  274,  144,  142,   98,   99,

      274,  274,    0,    0,    0,    0,    0,  274,  274,  274,
      274,  274,  274,  103,  274,  106,  274,  274,  274,  274,
        0,    0,    0,    0,    0,    0,  274,  274,  104,  107,
      274,  274,  274,  274,   85,  274,  105,  108,    0,    0,
        0,    7,    0,    0,    0,    0,  147,  148,  274,  274,
      274,  274,  110,    0,    0,    8,    0,    0,    0,    0,
      274,  274,  242,  274,    0,    0,    0,    0,    0,   11,
       86,   87,  274,    0,    0,    0,    9,    0,   12,  274,
        0,    0,   10,  109,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   23,   24,    1,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   35,   35,   36,   37,   35,   38,   35,
       35,   39,   40,   41,   42,   35,   35,   43,   35,   35,
        1,    1,    1,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,    1,   71,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    5,    5,    5,    5,    5,
        5,    5,    6,    1,    1,    1,    1,    7,    7,    7,
        7,    8,    9,   10,   10,   11,   10,   10,   10,   10,
       10,   10,   12,    1,   10,    7,    7,    7,    7,    8,
        9,   10,   10,   10,   10,   10,   11,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,   10,   10,
        1
    } ;

static const flex_int16_t yy_base[1110] =
    {   0,
        0,   70,   76,    0, 1543, 1542, 1544, 1547,   71, 1547,
     1517, 1516,  140, 1515,  137,  138,  136, 1514,  153,  208,
      135, 1513,  151,    0,  124,  117,  122,  133,  147,  141,
      188, 1478,  140,  198,  156,  158,  173, 1472,  197,  186,
      214,  213,  217,  191,  161,  206,  282,  267, 1547,  213,
     1547, 1521, 1547,  273, 1547,    0, 1547, 1547,  251, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,  318, 1547,
      360,  231,  271,  288, 1547, 1499,    0, 1477,    0, 1547,
     1497, 1475, 1505, 1547, 1547, 1547, 1504,    0, 1547, 1547,
     1465, 1470,  238, 1467, 1476, 1474, 1474, 1460, 1463, 1475,

      260, 1469, 1456, 1472, 1452, 1466, 1452, 1449, 1449, 1455,
      255,  269, 1449, 1460, 1445, 1451, 1455, 1456, 1485,    0,
     1446, 1457,  292, 1456, 1451, 1431,  132, 1435, 1449, 1439,
      266, 1432,  268, 1445, 1447,  279, 1426, 1434,  285, 1421,
     1430,  298,  300, 1435, 1430, 1433, 1421, 1424, 1464,  153,
      184,  268, 1433, 1420, 1433,  305, 1426, 1425, 1547, 1547,
      361,  368,  370, 1547, 1410, 1423, 1414, 1425,  344,    0,
      368,    0,  382, 1547, 1441, 1422,  390,  432, 1547, 1439,
     1420,  440,  373,  428, 1547, 1547, 1416,    0, 1411, 1406,
     1410, 1420, 1414, 1416,  357, 1399, 1399, 1411, 1402,  349,

     1413, 1410, 1393, 1409, 1407, 1404, 1395, 1402, 1388, 1386,
     1399, 1384, 1401,    0, 1398, 1385, 1393, 1390, 1394, 1375,
     1394, 1387, 1384, 1372, 1371,  392, 1389, 1376, 1385, 1372,
     1379, 1369,  419, 1375, 1378, 1368, 1376, 1364, 1368, 1359,
     1374, 1373, 1363, 1370,  355, 1353, 1372, 1355, 1353, 1352,
     1363, 1352, 1347, 1345, 1347, 1358, 1343, 1345, 1342, 1354,
     1353, 1336, 1355, 1336,  304, 1345, 1340, 1338, 1348, 1326,
      447, 1345, 1347, 1335, 1327, 1326, 1330, 1342, 1325,    0,
      455,  446, 1547,  488, 1547, 1353, 1334,  496,  487, 1547,
     1547, 1351, 1332, 1547, 1346, 1324, 1314, 1325, 1324,    0,

     1321, 1326,  468,    0,    0, 1313, 1311, 1311, 1312, 1307,
     1316, 1304, 1322,  471, 1310,  476,    0,    0, 1304, 1315,
     1314, 1314,    0, 1298,  506,    0,    0, 1300,  509, 1310,
     1307, 1308, 1298, 1292, 1291, 1334, 1291, 1290, 1290,  512,
     1285,    0,    0, 1281, 1280, 1279, 1281, 1282, 1287, 1281,
     1277, 1291, 1286, 1286, 1284, 1283, 1276, 1270, 1272, 1271,
     1274, 1274, 1280, 1265, 1268, 1263, 1272, 1277, 1264, 1261,
     1274, 1264,    0,    0, 1271, 1269, 1266, 1295, 1256, 1256,
     1262, 1252, 1260,  515, 1257,    0,    0,    0,    0, 1246,
     1259, 1258, 1257, 1256, 1253, 1241,  529,  503, 1547, 1547,

     1253, 1254, 1254,    0, 1238,    0,    0,    0, 1239,    0,
     1248, 1238,    0, 1237, 1238, 1232, 1225, 1224, 1223, 1240,
        0,    0,    0, 1230,    0, 1226,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1239, 1236,  538, 1235,    0,
        0, 1239, 1232, 1228, 1224,    0,    0,    0, 1216,  522,
      543,  546, 1221, 1217, 1223, 1213, 1211, 1225, 1209,    0,
     1209, 1223, 1211, 1207, 1214, 1208, 1220, 1215, 1215,    0,
     1212, 1209, 1213, 1196, 1194, 1197, 1204, 1210, 1205, 1206,
     1203, 1232, 1189,    0, 1191, 1192,    0,    0,    0,    0,
     1189, 1193,    0, 1186, 1186, 1242, 1185, 1188,    0, 1196,

     1175,    0, 1185, 1179,    0, 1172, 1172, 1186,  551,  554,
      557,    0, 1188,    0,  560,  564, 1202, 1201, 1200, 1165,
     1164,    0, 1164, 1181, 1180, 1175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1163, 1177, 1163, 1160,
        0,    0, 1166,  378,    0, 1162, 1170, 1169,    0, 1161,
     1153,    0,    0,    0,    0,    0, 1150,    0,    0, 1149,
     1161,  566,  570, 1166, 1152, 1159, 1158, 1155, 1149, 1146,
     1141,  588, 1157, 1142, 1136, 1136, 1150, 1134, 1147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1139,    0,    0,    0, 1164, 1163, 1162, 1127, 1126,  440,

      575,    0, 1139, 1142,    0, 1140, 1128, 1124,    0, 1137,
     1134, 1133, 1122,    0, 1121, 1111, 1129, 1114, 1117,  599,
     1122, 1125,    0,    0,    0,    0, 1143, 1142, 1141, 1106,
     1105, 1105,    0, 1119, 1105,    0, 1116, 1108, 1110,  589,
      617, 1161, 1103, 1107, 1110,    0,    0,    0,    0, 1131,
      585,    0, 1107, 1110, 1094, 1102, 1092, 1113, 1102, 1098,
     1099, 1099, 1098, 1083,  624, 1096,    0, 1097, 1085, 1084,
        0,    0,    0, 1080, 1110, 1109, 1108, 1073, 1072, 1068,
     1076,    0, 1106,  619,    0, 1082, 1085,    0,    0,  631,
        0, 1062, 1070,  649, 1547,  660,    0,  671,  657, 1547,

     1070,    0, 1066, 1065, 1086, 1075, 1073, 1073, 1060, 1075,
     1058, 1091, 1070, 1071, 1066, 1087,    0,    0, 1083, 1082,
     1081, 1046, 1045,    0, 1045,    0,    0,    0,  441,  668,
     1069, 1056, 1059, 1035, 1048, 1035, 1034, 1055, 1044, 1041,
     1033, 1051, 1050, 1049, 1014, 1013,    0, 1017,  642,  709,
      481, 1031, 1020, 1008, 1019,  999, 1000,  996, 1028, 1007,
     1001, 1021, 1002,  987,  981,  931,  928,  942,  928,  927,
      960,  647,    0,  936,  939,  931,  922,  930,  920,  941,
      930,  926,  928,  926,  926,  925,    0,  911,  910,  943,
      922,  919,  940,  939,  676,    0,  913,  916, 1547,  496,

     1547,  717,    0,  738,  930,  913,   10,  100,    0,  146,
      189,  225,  233,  264,  295,  297,  314,  328,  346,    0,
      356,    0,  371,  373,  381,  406,  442,  451,  471,  456,
      475,  497,  491,  530,  511,  549,  548,  547,  655,  536,
      555,  556,  559,  559,  563,  564,  565,  568,  606,  605,
      613,  648,  697,  667,  637,  649,  650,  645,  647,  656,
        0,    0,  659,  682,  656,  702,  697,  677,  699,  684,
      685,  720,  701,  700,  723,  702,  707,  713,  717,  702,
      701,  717,  703,  706,  707,  717,  712,  703,  704,  712,
        0,    0,  713,  714,  715,  750,  731,  730,  753,  746,

      731,  726,  731,    0,    0,  740,  741,  735,    0,  736,
      721,    0,  722,  746,  747,  732,  731,  734,  735,    0,
      729,  739,  731,  739,  762,  743,    0,    0,  742,  759,
      760,    0,    0,  761,  762,  763,  764,  749,  748,  751,
      752,  813,  814,  763,  759,  750,  751,  775,  776,    0,
        0,  755,  756,  764,    0,    0,  765,  788,  762,  790,
      785,  779,  766,  788,  786,  779,  768,  769,  770,  771,
      779,    0,    0,  780,  841,  842,  843,  776,  795,    0,
        0,  799,  800,    0,    0,  804,  806,  800,    0,  801,
      786,  810,    0,  788,  798,  821,    0,    0,    0,    0,

      814,  815,  803,  861,  813,  815,  864,  807,  808,  800,
      801,  825,  828,    0,  826,  836,  810,  846,  810,  811,
      815,  831,  881,  883,  884,  882,  820,  821,    0,    0,
      840,  841,  834,  843,    0,  857,    0,    0,  852,  897,
      898, 1547,  900,  899,  902,  854,    0,    0,  846,  850,
      844,  866,    0,  852,  913, 1547,  914,  866,  867,  917,
      853,  855,    0,  875,  872,  877,  927,  928,  929, 1547,
        0,    0,  872,  887,  933,  934, 1547,  938, 1547,  867,
      882,  943, 1547,    0,  882,  945,  947,  948,  949,  895,
      898,  955,  956, 1547, 1547,  995, 1003, 1011, 1020, 1024,

     1033, 1041, 1048, 1055, 1062, 1072, 1080, 1088, 1096
    } ;

static const flex_int16_t yy_def[1110] =
    {   0,
     1095,    1, 1095,    3, 1096, 1096, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1097, 1095, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1098, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095,   19, 1099, 1095, 1095, 1095, 1100, 1095,   20, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1097, 1095, 1095,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1101,
     1095, 1098, 1095, 1095, 1095, 1095,   71, 1095, 1095, 1095,
     1095, 1095, 1102, 1100, 1095, 1095, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1095, 1095, 1095, 1095, 1101,
     1095, 1103, 1095, 1095, 1095, 1095, 1095, 1095, 1104, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1095, 1095, 1095, 1095, 1095, 1105, 1095, 1095,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1095, 1095, 1095, 1095, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1106,
     1095, 1095, 1095, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1095, 1095, 1095, 1095, 1107, 1095, 1095, 1095,

     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1108, 1095,
     1107, 1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1095,

     1095, 1095, 1109, 1095, 1095, 1095, 1095, 1095, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1109, 1095, 1095, 1095, 1095, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095,

     1095, 1095, 1095, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1095, 1095, 1095, 1095, 1095, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,

     1097, 1097, 1095, 1095, 1095, 1095, 1095, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1095, 1095, 1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1097, 1097, 1097, 1097, 1095, 1095, 1095, 1095, 1095, 1095,
     1097, 1097, 1097, 1095, 1095, 1095, 1095, 1095, 1095, 1097,
     1095, 1095, 1095, 1097, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095,    0, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095
    } ;

static const flex_int16_t yy_nxt[1619] =
    {   0,
        8,    9,   10,    9,   11,    8,   12,   13,    8,    8,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   20,
       20,   20,   20,    8,   21,   22,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   25,   24,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   24,   24,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   24,   24,   24,
       46,   47,   59,  856,   59,   48,   49,   50,   51,   50,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       52,   53,   54,   54,   54,   54,   54,   54,   54,   55,

       49,   49,   49,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   49,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   49,   62,   65,   89,
       67,   69,   69,   69,   69,   69,   69,   69,   69,   83,
       84,  857,   66,   68,   91,   63,   71,   90,   72,   72,
       72,   72,   72,   72,   72,   73,   86,   87,   98,   92,
       93,   94,   99,   95,   74,  116,   96,   97,   75,  100,
      231,  858,  101,  117,   76,   77,  102,  107,  232,  108,

      103,  126,   74,  128,  104,  118,  105,  129,  109,   75,
      263,  264,  106,  157,  169,  127,  169,   78,  130,  119,
       77,   71,  158,   79,   79,   79,   79,   79,   79,   79,
       79,  159,  131,  110,  859,  136,  154,  265,  149,   74,
      155,  111,  133,   80,  112,  137,  266,  113,  120,   81,
      156,  121,   59,  114,   59,  122,  123,   74,  134,  138,
      124,  135,  145,  125,   80,  146,  139,  140,  163,  164,
      150,  141,   82, 1095,  147,  151,  160,  142,  143,  152,
      144,  148,  153,  161,   71,   59,  860,  162,  171,  171,
      171,  171,  171,  171,  171,  171,  861,  189, 1095,  182,

      182,  190,   74,  183,  183,  183,  183,  183,  183,  183,
      183,  210,  198,  267,  212,  239,  165,  199,  200,  236,
       74,  268,  211,  166,  244,  862,  237,  167,  213,  240,
      249,  241,  168,   69,   69,   69,   69,   69,   69,   69,
       69,  245,  246,  253,  250,  169,  255,  169,  223,  173,
      174,  224,  225,  175,  379,  226,  863,  227,  272,  254,
      256,  273,  161,  380,   59,  864,  162,  173,  174,  163,
      164,  163,  164,  865,  176,  177,  177,  177,  177,  177,
      177,  177,  177,  171,  171,  171,  171,  171,  171,  171,
      171,  178,  179,  281,  281,  180,  866,  282,  282,  282,

      282,  282,  282,  282,  282,  291,  304,  867,  292,  178,
      179,  310,  311,  336,  358,  868,  181,  165,  359,  165,
      305,  284,  285,  291,  166,  286,  166,  614,  167,  293,
      167,  615,  869,  168,  870,  168,  344,  345,  346,  284,
      285,  337,  871,  288,  288,  872,  287,  289,  289,  289,
      289,  289,  289,  289,  289,  183,  183,  183,  183,  183,
      183,  183,  183,  294,  386,  387,  388,  655,  777,  295,
      282,  282,  282,  282,  282,  282,  282,  282,  174,  656,
      778,  175,  694,  695,  294,  406,  407,  408,  417,  418,
      419,  873,  296,  421,  422,  423,  174,  800,  801,  397,

      397,  874,  176,  398,  398,  398,  398,  398,  398,  398,
      398,  289,  289,  289,  289,  289,  289,  289,  289,  179,
      875,  876,  180,  429,  430,  431,  433,  434,  435,  446,
      447,  448,  488,  489,  490,  285,  877,  179,  286,  528,
      529,  530,  878,  181,  398,  398,  398,  398,  398,  398,
      398,  398,  879,  285,  517,  518,  519,  880,  881,  287,
      531,  532,  533,  534,  535,  536,  520,  521,  582,  583,
      584,  585,  586,  587,  588,  589,  590,  592,  593,  594,
      595,  596,  597,  624,  625,  626,  627,  628,  629,  572,
      694,  695,  598,  599,  882,  883,  884,  887,  630,  631,

      888,  889,  657,  640,  641,  641,  641,  641,  641,  641,
      641,  658,  704,  659,  660,  675,  676,  677,  694,  695,
      890,  705,  891,  706,  892,  893,  894,  678,  679,  895,
      680,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      719,  720,  721,  800,  801,  896,  737,  742,  743,  744,
      694,  695,  722,  723,  897,  738,  697,  739,  699,  745,
      746,  694,  695,  898,  749,  750,  750,  750,  750,  750,
      750,  750,  694,  695,  825,  696,  696,  696,  696,  696,
      696,  696,  885,  826,  803,  827,  698,  698,  698,  698,
      698,  698,  698,  698,  886,  779,  752,  899,  800,  801,

      900,  901,  902,  848,  780,  753,  781,  782,  903,  803,
      800,  801,  849,  904,  850,  905,  754,  906,  800,  801,
      907,  908,  909,  755,  804,  804,  804,  804,  804,  804,
      804,  804,  802,  802,  802,  802,  802,  802,  802,  800,
      801,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  804,  804,  804,  804,  804,  804,  804,
      804,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,

      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  978,  979,  980,  981,
      982,  983,  977,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002,  975,  976, 1004, 1006, 1007, 1008, 1009, 1010,
      977, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1004, 1022, 1024, 1025, 1027, 1028, 1029, 1030,
     1031, 1023, 1026, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1040, 1041, 1045, 1043, 1025, 1047, 1048, 1049, 1050,
     1042, 1044, 1026, 1051, 1003, 1052, 1053, 1054, 1055, 1041,

     1057, 1043, 1005, 1045, 1059, 1061, 1056, 1042, 1044, 1062,
     1063, 1064, 1060, 1065, 1055, 1057, 1066, 1068, 1069, 1071,
     1005, 1072, 1056, 1073, 1067, 1074, 1070, 1075, 1076, 1078,
     1069, 1080, 1081, 1084, 1082, 1076, 1077, 1079, 1070, 1078,
     1085, 1046, 1083, 1077, 1082, 1086, 1087, 1079, 1087, 1089,
     1089, 1091, 1083, 1088, 1092, 1088, 1093, 1093, 1058,  855,
      854, 1046,  852,  851, 1094, 1094,  847,  846,  845,  844,
      843,  842,  841, 1058,  840,  839,  838,  837,  836,  835,
      834,  833,  832,  831,  830,  829,  828,  824,  823,  822,
      821,  820,  819, 1090, 1090,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   88,   88,   88,
       88,   88,   88,   88,   88,  172,  172,  172,  172,  172,
      172,  172,  172,   73,   73,   73,  818,   73,  184,  184,
      184,  184,  184,  280,  280,  817,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  183,  183,  816,  815,  183,
      814,  183,  282,  282,  813,  812,  282,  811,  282,  289,
      289,  810,  809,  289,  808,  289,  398,  398,  807,  806,
      398,  805,  398,  696,  696,  799,  696,  798,  797,  796,
      795,  794,  793,  696,  751,  751,  751,  751,  751,  802,
      802,  792,  802,  791,  790,  789,  788,  787,  786,  802,

      853,  853,  853,  853,  853,  785,  784,  783,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  748,
      747,  741,  740,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  718,  717,  716,  715,
      714,  713,  712,  711,  710,  709,  708,  707,  703,  702,
      701,  700,  699,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,

      644,  643,  642,  639,  638,  637,  636,  635,  634,  633,
      632,  623,  622,  621,  620,  619,  618,  617,  616,  613,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  591,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  527,
      526,  525,  524,  523,  522,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,

      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      432,  428,  427,  426,  425,  424,  420,  416,  415,  414,
      413,  412,  411,  410,  409,  405,  404,  403,  402,  401,
      294,  294,  400,  400,  399,  399,  396,  395,  394,  393,
      392,  391,  390,  389,  385,  384,  383,  382,  381,  378,

      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  343,
      342,  341,  340,  339,  338,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  309,
      308,  307,  306,  303,  302,  301,  300,  299,  298,  297,
      290,  290,  283,  283,  279,  278,  277,  276,  275,  274,
      271,  270,  269,  262,  261,  260,  259,  258,  257,  252,
      251,  248,  247,  243,  242,  238,  235,  234,  233,  230,

      229,  228,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      197,  196,  195,  194,  193,  192,  191,  188,  187,  186,
      185,   80,   80,   75,   75,  170,  132,  115,   85,   70,
       64,   61,   60, 1095,   58,   58,    7, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095
    } ;

static const flex_int16_t yy_chk[1619] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    9,  807,    9,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   13,   15,   25,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   21,
       21,  808,   15,   16,   26,   13,   19,   25,   19,   19,
       19,   19,   19,   19,   19,   19,   23,   23,   28,   26,
       26,   27,   28,   27,   19,   33,   27,   27,   19,   28,
      127,  810,   28,   33,   19,   19,   29,   30,  127,   30,

       29,   35,   19,   36,   29,   33,   29,   36,   30,   19,
      150,  150,   29,   45,   50,   35,   50,   19,   37,   34,
       19,   20,   45,   20,   20,   20,   20,   20,   20,   20,
       20,   46,   37,   31,  811,   40,   44,  151,   43,   20,
       44,   31,   39,   20,   31,   40,  151,   31,   34,   20,
       44,   34,   59,   31,   59,   34,   34,   20,   39,   41,
       34,   39,   42,   34,   20,   42,   41,   41,   48,   48,
       43,   41,   20,   72,   42,   43,   46,   41,   41,   43,
       41,   42,   43,   47,   73,   47,  812,   47,   54,   54,
       54,   54,   54,   54,   54,   54,  813,   93,   72,   74,

       74,   93,   73,   74,   74,   74,   74,   74,   74,   74,
       74,  111,  101,  152,  112,  133,   48,  101,  101,  131,
       73,  152,  111,   48,  136,  814,  131,   48,  112,  133,
      139,  133,   48,   69,   69,   69,   69,   69,   69,   69,
       69,  136,  136,  142,  139,  169,  143,  169,  123,   69,
       69,  123,  123,   69,  265,  123,  815,  123,  156,  142,
      143,  156,  161,  265,  161,  816,  161,   69,   69,  162,
      162,  163,  163,  817,   69,   71,   71,   71,   71,   71,
       71,   71,   71,  171,  171,  171,  171,  171,  171,  171,
      171,   71,   71,  173,  173,   71,  818,  173,  173,  173,

      173,  173,  173,  173,  173,  183,  195,  819,  183,   71,
       71,  200,  200,  226,  245,  821,   71,  162,  245,  163,
      195,  177,  177,  183,  162,  177,  163,  544,  162,  183,
      163,  544,  823,  162,  824,  163,  233,  233,  233,  177,
      177,  226,  825,  178,  178,  826,  177,  178,  178,  178,
      178,  178,  178,  178,  178,  182,  182,  182,  182,  182,
      182,  182,  182,  184,  271,  271,  271,  600,  729,  184,
      281,  281,  281,  281,  281,  281,  281,  281,  282,  600,
      729,  282,  751,  751,  184,  303,  303,  303,  314,  314,
      314,  827,  184,  316,  316,  316,  282,  800,  800,  284,

      284,  828,  282,  284,  284,  284,  284,  284,  284,  284,
      284,  288,  288,  288,  288,  288,  288,  288,  288,  289,
      829,  830,  289,  325,  325,  325,  329,  329,  329,  340,
      340,  340,  384,  384,  384,  398,  831,  289,  398,  450,
      450,  450,  832,  289,  397,  397,  397,  397,  397,  397,
      397,  397,  833,  398,  438,  438,  438,  834,  835,  398,
      451,  451,  451,  452,  452,  452,  438,  438,  509,  509,
      509,  510,  510,  510,  511,  511,  511,  515,  515,  515,
      516,  516,  516,  562,  562,  562,  563,  563,  563,  572,
      640,  640,  516,  516,  836,  837,  838,  840,  563,  563,

      841,  842,  601,  572,  572,  572,  572,  572,  572,  572,
      572,  601,  651,  601,  601,  620,  620,  620,  641,  641,
      843,  651,  844,  651,  845,  846,  847,  620,  620,  848,
      620,  640,  641,  641,  641,  641,  641,  641,  641,  641,
      665,  665,  665,  749,  749,  849,  684,  690,  690,  690,
      694,  694,  665,  665,  850,  684,  640,  684,  699,  690,
      690,  696,  696,  851,  694,  694,  694,  694,  694,  694,
      694,  694,  698,  698,  772,  696,  696,  696,  696,  696,
      696,  696,  839,  772,  749,  772,  698,  698,  698,  698,
      698,  698,  698,  698,  839,  730,  699,  852,  853,  853,

      854,  855,  856,  795,  730,  699,  730,  730,  857,  749,
      750,  750,  795,  858,  795,  859,  699,  860,  802,  802,
      863,  864,  865,  699,  750,  750,  750,  750,  750,  750,
      750,  750,  802,  802,  802,  802,  802,  802,  802,  804,
      804,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  804,  804,  804,  804,  804,  804,  804,
      804,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  893,  894,  895,  896,  897,  898,
      899,  900,  901,  902,  903,  906,  907,  908,  910,  911,
      913,  914,  915,  916,  917,  918,  919,  921,  922,  923,

      924,  925,  926,  929,  930,  931,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  943,  952,  953,  954,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
      971,  974,  975,  976,  977,  978,  979,  982,  983,  986,
      976,  987,  988,  990,  991,  992,  994,  995,  996, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1005, 1007, 1013, 1015, 1016, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1026, 1024, 1025, 1027, 1028, 1031, 1032,
     1023, 1024, 1025, 1033,  975, 1034, 1036, 1039, 1040, 1041,

     1044, 1043,  977, 1045, 1046, 1049, 1040, 1041, 1043, 1050,
     1051, 1052, 1046, 1054, 1055, 1057, 1058, 1059, 1060, 1061,
     1004, 1062, 1055, 1064, 1058, 1065, 1060, 1066, 1067, 1068,
     1069, 1073, 1074, 1080, 1075, 1076, 1067, 1068, 1069, 1078,
     1081, 1026, 1075, 1076, 1082, 1085, 1086, 1078, 1087, 1088,
     1089, 1090, 1082, 1086, 1091, 1087, 1092, 1093, 1044,  806,
      805, 1045,  798,  797, 1092, 1093,  794,  793,  792,  791,
      790,  789,  788, 1057,  786,  785,  784,  783,  782,  781,
      780,  779,  778,  777,  776,  775,  774,  771,  770,  769,
      768,  767,  766, 1088, 1089, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1099, 1099, 1099,  765, 1099, 1100, 1100,
     1100, 1100, 1100, 1101, 1101,  764, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1102, 1102,  763,  762, 1102,
      761, 1102, 1103, 1103,  760,  759, 1103,  758, 1103, 1104,
     1104,  757,  756, 1104,  755, 1104, 1105, 1105,  754,  753,
     1105,  752, 1105, 1106, 1106,  748, 1106,  746,  745,  744,
      743,  742,  741, 1106, 1107, 1107, 1107, 1107, 1107, 1108,
     1108,  740, 1108,  739,  738,  737,  736,  735,  734, 1108,

     1109, 1109, 1109, 1109, 1109,  733,  732,  731,  725,  723,
      722,  721,  720,  719,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  701,  693,
      692,  687,  686,  683,  681,  680,  679,  678,  677,  676,
      675,  674,  670,  669,  668,  666,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  650,  645,
      644,  643,  642,  639,  638,  637,  635,  634,  632,  631,
      630,  629,  628,  627,  622,  621,  619,  618,  617,  616,
      615,  613,  612,  611,  610,  608,  607,  606,  604,  603,
      599,  598,  597,  596,  595,  591,  579,  578,  577,  576,

      575,  574,  573,  571,  570,  569,  568,  567,  566,  565,
      564,  561,  560,  557,  551,  550,  548,  547,  546,  543,
      540,  539,  538,  537,  526,  525,  524,  523,  521,  520,
      519,  518,  517,  513,  508,  507,  506,  504,  503,  501,
      500,  498,  497,  496,  495,  494,  492,  491,  486,  485,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  459,  458,  457,  456,  455,  454,  453,  449,
      445,  444,  443,  442,  439,  437,  436,  426,  424,  420,
      419,  418,  417,  416,  415,  414,  412,  411,  409,  405,

      403,  402,  401,  396,  395,  394,  393,  392,  391,  390,
      385,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  341,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      328,  324,  322,  321,  320,  319,  315,  313,  312,  311,
      310,  309,  308,  307,  306,  302,  301,  299,  298,  297,
      296,  295,  293,  292,  287,  286,  279,  278,  277,  276,
      275,  274,  273,  272,  270,  269,  268,  267,  266,  264,

      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  232,
      231,  230,  229,  228,  227,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  199,
      198,  197,  196,  194,  193,  192,  191,  190,  189,  187,
      181,  180,  176,  175,  168,  167,  166,  165,  158,  157,
      155,  154,  153,  149,  148,  147,  146,  145,  144,  141,
      140,  138,  137,  135,  134,  132,  130,  129,  128,  126,

      125,  124,  122,  121,  119,  118,  117,  116,  115,  114,
      113,  110,  109,  108,  107,  106,  105,  104,  103,  102,
      100,   99,   98,   97,   96,   95,   94,   92,   91,   87,
       83,   82,   81,   78,   76,   52,   38,   32,   22,   18,
       14,   12,   11,    7,    6,    5, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./glsl/glsl_lexer.ll"
#line 2 "./glsl/glsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "glsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *,
			       unsigned name_len, YYSTYPE *output);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_NO_INPUT
#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

/**
 * Like KEYWORD_WITH_ALT, but used for built-in GLSL types
 */
#define TYPE_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
		      allowed_glsl, allowed_glsl_es,			\
		      alt_expr, gtype)					\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 yylval->type = gtype; 						\
	 return BASIC_TYPE_TOK;						\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

#define TYPE(reserved_glsl, reserved_glsl_es,				\
             allowed_glsl, allowed_glsl_es,				\
             gtype)							\
   TYPE_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                 allowed_glsl, allowed_glsl_es,				\
                 false, gtype)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

/**
 * Like DEPRECATED_ES_KEYWORD, but for types
 */
#define DEPRECATED_ES_TYPE_WITH_ALT(alt_expr, gtype)			\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
         _mesa_glsl_error(yylloc, yyextra,				\
                          "illegal use of reserved word `%s'", yytext);	\
         return ERROR_TOK;						\
      } else if (alt_expr) {						\
         yylval->type = gtype;						\
         return BASIC_TYPE_TOK;						\
      } else {								\
         return classify_identifier(yyextra, yytext, yyleng, yylval);	\
      }									\
   } while (0)

#define DEPRECATED_ES_TYPE(gtype)					\
   DEPRECATED_ES_TYPE_WITH_ALT(true, gtype)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   bool is_long = (text[len - 1] == 'l' || text[len - 1] == 'L');
   const char *digits = text;

   if (is_long)
      is_uint = (text[len - 2] == 'u' && text[len - 1] == 'l') ||
                (text[len - 2] == 'U' && text[len - 1] == 'L');
   /* Skip "0x" */
   if (base == 16)
      digits += 2;

   unsigned long long value = strtoull(digits, NULL, base);

   if (is_long)
      lval->n64 = (int64_t)value;
   else
      lval->n = (int)value;

   if (is_long && !is_uint && base == 10 && value > (uint64_t)LLONG_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value. */
      _mesa_glsl_warning(lloc, state,
                         "signed literal value `%s' is interpreted as %lld",
                         text, lval->n64);
   } else if (!is_long && value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   if (is_long)
      return is_uint ? UINT64CONSTANT : INT64CONSTANT;
   else
      return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

#line 1584 "glsl/glsl_lexer.cpp"
#line 217 "./glsl/glsl_lexer.ll"
	/* Note: When adding any start conditions to this list, you must also
	 * update the "Internal compiler error" catch-all rule near the end of
	 * this file. */

#line 1590 "glsl/glsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 229 "./glsl/glsl_lexer.ll"


#line 1878 "glsl/glsl_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1096 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1095 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 231 "./glsl/glsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "./glsl/glsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 235 "./glsl/glsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 236 "./glsl/glsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 237 "./glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;

				   yylloc->source = strtol(ptr, NULL, 0);
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 261 "./glsl/glsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 1;

                                   /* From GLSL 3.30 and GLSL ES on, after processing the
                                    * line directive (including its new-line), the implementation
                                    * will behave as if it is compiling at the line number passed
                                    * as argument. It was line number + 1 in older specifications.
                                    */
                                   if (yyextra->is_version(330, 100))
                                      yylineno--;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 283 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 287 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 291 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 295 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 299 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_WARNING_ON;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 303 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_WARNING_OFF;
				}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 307 "./glsl/glsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 311 "./glsl/glsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 313 "./glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 314 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 316 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 317 "./glsl/glsl_lexer.ll"
{ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 318 "./glsl/glsl_lexer.ll"
return COLON;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 319 "./glsl/glsl_lexer.ll"
{
				   /* We're not doing linear_strdup here, to avoid an implicit call
				    * on strlen() for the length of the string, as this is already
				    * found by flex and stored in yyleng
				    */
                                    void *mem_ctx = yyextra->linalloc;
                                    char *id = (char *) linear_alloc_child(mem_ctx, yyleng + 1);
                                    memcpy(id, yytext, yyleng + 1);
                                    yylval->identifier = id;
				   return IDENTIFIER;
				}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 330 "./glsl/glsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 334 "./glsl/glsl_lexer.ll"
{
				    yylval->n = 0;
				    return INTCONSTANT;
				}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 338 "./glsl/glsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 339 "./glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 341 "./glsl/glsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 343 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 344 "./glsl/glsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 345 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::bool_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 346 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::float_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 347 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::int_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 348 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::uint_type);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 350 "./glsl/glsl_lexer.ll"
return BREAK;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 351 "./glsl/glsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 352 "./glsl/glsl_lexer.ll"
return DO;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 353 "./glsl/glsl_lexer.ll"
return WHILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 354 "./glsl/glsl_lexer.ll"
return ELSE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 355 "./glsl/glsl_lexer.ll"
return FOR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 356 "./glsl/glsl_lexer.ll"
return IF;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 357 "./glsl/glsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 358 "./glsl/glsl_lexer.ll"
return RETURN;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 360 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::bvec2_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 361 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::bvec3_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 362 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::bvec4_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 363 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::ivec2_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 364 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::ivec3_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 365 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::ivec4_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 366 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::uvec2_type);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 367 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::uvec3_type);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 368 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::uvec4_type);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 369 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::vec2_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 370 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::vec3_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 371 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::vec4_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 372 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::mat2_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 373 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::mat3_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 374 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::mat4_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 375 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat2_type);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 376 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat2x3_type);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 377 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat2x4_type);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 378 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat3x2_type);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 379 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat3_type);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 380 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat3x4_type);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 381 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat4x2_type);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 382 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat4x3_type);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 383 "./glsl/glsl_lexer.ll"
TYPE(120, 300, 120, 300, glsl_type::mat4_type);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 385 "./glsl/glsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 386 "./glsl/glsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 387 "./glsl/glsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 388 "./glsl/glsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 389 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 0, 430, 310, yyextra->ARB_shader_storage_buffer_object_enable, BUFFER);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 390 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 391 "./glsl/glsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 392 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 393 "./glsl/glsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 394 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 395 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 396 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(0, 300, 400, 320, yyextra->has_tessellation_shader(), PATCH);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 398 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_TYPE(glsl_type::sampler1D_type);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 399 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::sampler2D_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 400 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::sampler3D_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 401 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::samplerCube_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 402 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::sampler1DArray_type);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 403 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::sampler2DArray_type);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 404 "./glsl/glsl_lexer.ll"
DEPRECATED_ES_TYPE(glsl_type::sampler1DShadow_type);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 405 "./glsl/glsl_lexer.ll"
{ yylval->type = glsl_type::sampler2DShadow_type; return BASIC_TYPE_TOK; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 406 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::samplerCubeShadow_type);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 407 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::sampler1DArrayShadow_type);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 408 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::sampler2DArrayShadow_type);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 409 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::isampler1D_type);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 410 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::isampler2D_type);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 411 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::isampler3D_type);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 412 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::isamplerCube_type);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 413 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::isampler1DArray_type);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 414 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::isampler2DArray_type);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 415 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::usampler1D_type);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 416 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::usampler2D_type);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 417 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::usampler3D_type);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 418 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::usamplerCube_type);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 419 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 0, glsl_type::usampler1DArray_type);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 420 "./glsl/glsl_lexer.ll"
TYPE(130, 300, 130, 300, glsl_type::usampler2DArray_type);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
/* [iu]sampler2DMS are defined in GLSL ES 3.10 */
case 100:
YY_RULE_SETUP
#line 425 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, glsl_type::sampler2DMS_type);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 426 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, glsl_type::isampler2DMS_type);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 427 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 310, yyextra->ARB_texture_multisample_enable, glsl_type::usampler2DMS_type);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 428 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, glsl_type::sampler2DMSArray_type);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 429 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, glsl_type::isampler2DMSArray_type);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 430 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(150, 300, 150, 320, yyextra->ARB_texture_multisample_enable || yyextra->OES_texture_storage_multisample_2d_array_enable, glsl_type::usampler2DMSArray_type);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 106:
YY_RULE_SETUP
#line 433 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::samplerCubeArray_type);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 434 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::isamplerCubeArray_type);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 435 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::usamplerCubeArray_type);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 436 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(400, 310, 400, 320, yyextra->ARB_texture_cube_map_array_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::samplerCubeArrayShadow_type);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 438 "./glsl/glsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable || yyextra->OES_EGL_image_external_essl3_enable) {
			     yylval->type = glsl_type::samplerExternalOES_type;
			     return BASIC_TYPE_TOK;
			  } else
			     return IDENTIFIER;
		}
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 111:
YY_RULE_SETUP
#line 447 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 310, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->EXT_gpu_shader5_enable || yyextra->OES_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 112:
YY_RULE_SETUP
#line 450 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::image1D_type);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 451 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::image2D_type);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 452 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::image3D_type);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 453 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::image2DRect_type);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 454 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::imageCube_type);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 455 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::imageBuffer_type);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 456 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::image1DArray_type);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 457 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::image2DArray_type);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 458 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::imageCubeArray_type);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 459 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::image2DMS_type);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 460 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::image2DMSArray_type);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 461 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage1D_type);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 462 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage2D_type);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 463 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage3D_type);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 464 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage2DRect_type);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 465 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimageCube_type);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 466 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::iimageBuffer_type);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 467 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage1DArray_type);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 468 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage2DArray_type);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 469 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::iimageCubeArray_type);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 470 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage2DMS_type);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 471 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::iimage2DMSArray_type);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 472 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage1D_type);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 473 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage2D_type);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 474 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage3D_type);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 475 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage2DRect_type);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 476 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimageCube_type);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 477 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::uimageBuffer_type);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 478 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage1DArray_type);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 479 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage2DArray_type);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 480 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 320, yyextra->ARB_shader_image_load_store_enable || yyextra->OES_texture_cube_map_array_enable || yyextra->EXT_texture_cube_map_array_enable, glsl_type::uimageCubeArray_type);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 481 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage2DMS_type);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 482 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, glsl_type::uimage2DMSArray_type);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 483 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 484 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 485 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 486 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 488 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, COHERENT);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 489 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, VOLATILE);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 490 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, RESTRICT);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 491 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, READONLY);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 492 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_image_load_store_enable || yyextra->ARB_shader_storage_buffer_object_enable, WRITEONLY);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 494 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, glsl_type::atomic_uint_type);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 496 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(430, 310, 430, 310, yyextra->ARB_compute_shader_enable, SHARED);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 498 "./glsl/glsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 499 "./glsl/glsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 501 "./glsl/glsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->ARB_bindless_texture_enable
		      || yyextra->KHR_blend_equation_advanced_enable
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->ARB_post_depth_coverage_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable
                      || yyextra->ARB_tessellation_shader_enable
                      || yyextra->EXT_shader_framebuffer_fetch_non_coherent_enable) {
		      return LAYOUT_TOK;
		   } else {
		      return classify_identifier(yyextra, yytext, yyleng, yylval);
		   }
		}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 523 "./glsl/glsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 524 "./glsl/glsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 525 "./glsl/glsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 526 "./glsl/glsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 527 "./glsl/glsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 528 "./glsl/glsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 529 "./glsl/glsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 530 "./glsl/glsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 531 "./glsl/glsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 532 "./glsl/glsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 533 "./glsl/glsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 535 "./glsl/glsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 536 "./glsl/glsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 537 "./glsl/glsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 538 "./glsl/glsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 539 "./glsl/glsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 540 "./glsl/glsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 541 "./glsl/glsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 542 "./glsl/glsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 543 "./glsl/glsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 544 "./glsl/glsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 546 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 549 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 552 "./glsl/glsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 183:
#line 557 "./glsl/glsl_lexer.ll"
case 184:
#line 558 "./glsl/glsl_lexer.ll"
case 185:
#line 559 "./glsl/glsl_lexer.ll"
case 186:
YY_RULE_SETUP
#line 559 "./glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    char suffix = yytext[strlen(yytext) - 1];
			    if (!state->is_version(120, 300) &&
			        (suffix == 'f' || suffix == 'F')) {
			        _mesa_glsl_warning(yylloc, state,
			                           "Float suffixes are invalid in GLSL 1.10");
			    }
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 187:
#line 572 "./glsl/glsl_lexer.ll"
case 188:
#line 573 "./glsl/glsl_lexer.ll"
case 189:
#line 574 "./glsl/glsl_lexer.ll"
case 190:
YY_RULE_SETUP
#line 574 "./glsl/glsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 582 "./glsl/glsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 586 "./glsl/glsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 193:
YY_RULE_SETUP
#line 593 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 594 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 595 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 596 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 597 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 598 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 599 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 600 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 601 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 602 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 603 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 604 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 605 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 606 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 607 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, STATIC);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 608 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 609 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 610 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 611 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 612 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 613 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 100, 130, 300, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::double_type);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 614 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 615 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 616 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 617 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INPUT_TOK);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 618 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, OUTPUT);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 619 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 620 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 621 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 622 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dvec2_type);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 623 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dvec3_type);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 624 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dvec4_type);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 625 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat2_type);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 626 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat3_type);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 627 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat4_type);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 628 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat2_type);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 629 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat2x3_type);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 630 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat2x4_type);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 631 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat3x2_type);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 632 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat3_type);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 633 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat3x4_type);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 634 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat4x2_type);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 635 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat4x3_type);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 636 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, glsl_type::dmat4_type);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 637 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 638 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 639 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 640 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 0, 0, yyextra->ARB_texture_rectangle_enable, glsl_type::sampler2DRect_type);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 641 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 642 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(110, 100, 0, 0, yyextra->ARB_texture_rectangle_enable, glsl_type::sampler2DRectShadow_type);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 643 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 644 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 645 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 646 "./glsl/glsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 247:
YY_RULE_SETUP
#line 649 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 650 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 651 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 652 "./glsl/glsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 251:
YY_RULE_SETUP
#line 655 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 656 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 657 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 658 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 659 "./glsl/glsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 660 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(130, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::samplerBuffer_type);
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 661 "./glsl/glsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 662 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 259:
YY_RULE_SETUP
#line 665 "./glsl/glsl_lexer.ll"
TYPE(140, 300, 140, 0, glsl_type::isampler2DRect_type);
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 666 "./glsl/glsl_lexer.ll"
TYPE(140, 300, 140, 0, glsl_type::usampler2DRect_type);
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 667 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::isamplerBuffer_type);
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 668 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(140, 300, 140, 320, yyextra->EXT_texture_buffer_enable || yyextra->OES_texture_buffer_enable, glsl_type::usamplerBuffer_type);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 263:
YY_RULE_SETUP
#line 671 "./glsl/glsl_lexer.ll"
KEYWORD(420, 300, 0, 0, RESOURCE);
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 672 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 320, yyextra->ARB_gpu_shader5_enable || yyextra->OES_shader_multisample_interpolation_enable, SAMPLE);
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 673 "./glsl/glsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_shader_subroutine_enable, SUBROUTINE);
	YY_BREAK
/* Additional words for ARB_gpu_shader_int64 */
case 266:
YY_RULE_SETUP
#line 676 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::int64_t_type);
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 677 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::i64vec2_type);
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 678 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::i64vec3_type);
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 679 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::i64vec4_type);
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 681 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::uint64_t_type);
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 682 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::u64vec2_type);
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 683 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::u64vec3_type);
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 684 "./glsl/glsl_lexer.ll"
TYPE_WITH_ALT(0, 0, 0, 0, yyextra->ARB_gpu_shader_int64_enable || yyextra->AMD_gpu_shader_int64_enable, glsl_type::u64vec4_type);
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 686 "./glsl/glsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    if (state->es_shader && yyleng > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    }
			    return classify_identifier(state, yytext, yyleng, yylval);
			}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 696 "./glsl/glsl_lexer.ll"
{ struct _mesa_glsl_parse_state *state = yyextra;
			  state->is_field = true;
			  return DOT_TOK; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 700 "./glsl/glsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 702 "./glsl/glsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3469 "glsl/glsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1096 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1096 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1095);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 702 "./glsl/glsl_lexer.ll"


int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name,
                    unsigned name_len, YYSTYPE *output)
{
   /* We're not doing linear_strdup here, to avoid an implicit call on
    * strlen() for the length of the string, as this is already found by flex
    * and stored in yyleng
    */
   char *id = (char *) linear_alloc_child(state->linalloc, name_len + 1);
   memcpy(id, name, name_len + 1);
   output->identifier = id;

   if (state->is_field) {
      state->is_field = false;
      return FIELD_SELECTION;
   }
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_glsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   yylex_init_extra(state, & state->scanner);
   yy_scan_string(string, state->scanner);
}

void
_mesa_glsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   yylex_destroy(state->scanner);
}

